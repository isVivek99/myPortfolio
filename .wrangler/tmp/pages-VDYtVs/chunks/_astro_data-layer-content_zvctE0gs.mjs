globalThis.process ??= {}; globalThis.process.env ??= {};
const _astro_dataLayerContent = [["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.7.4","content-config-digest","af9e361b9c7ead47","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"server\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"index.js\",\"redirects\":false,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\",\"entrypoint\":\"@astrojs/cloudflare/image-endpoint\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false},\"legacy\":{\"collections\":false},\"session\":{\"driver\":\"cloudflare-kv-binding\",\"options\":{\"binding\":\"SESSION\"}}}","blogs",["Map",11,12,55,56,97,98,141,142,203,204],"classes-in-js",{id:11,data:13,body:19,filePath:20,assetImports:21,digest:27,rendered:28,legacyId:54},{title:14,subheading:15,cover:16,publishedAt:17,readingTimeInMins:18},"Debunking Classes in JavaScript.","In this blog we discuss how instance of a class and a function in JavaScript are very similar","__ASTRO_IMAGE_../../icons/cover-4.svg",["Date","2021-05-22T00:00:00.000Z"],4,"**TL;DR** ECMAScript6 introduced _classes_ as a syntactical sugar for creating prototype constructors. It is said to improve code readability. This blog focuses on how everything worked before classes .\n\n> JavaScript is a high-level, dynamic, and loosely-typed programming language. It is highly object-oriented to the core with its prototype-based model, inspired by Self programming language.\n\n## Points to remember\n\n- **ECMAScript6** had introduced class keyword as syntactic sugar on top of the (existing) prototype-based programming model, and there hasn't happened any change to this model.\n\n![blog-2.jpeg](../../../src/assets/blogs/classes-in-js/img-1.jpeg)\n\n### Class Terminology\n\n- class : A type of a blueprint used for making objects.\n- object : Acts as an instance of a class. Multiple instances of a class can be created.\n- method : The functions which lie inside of classes are called as methods of a class.\n- constructor : A special function which is called implicitly once we create an object of a class.\n\n### ES6 class component and its pre ES6 equivalent\n\n```javascript\nclass Dev {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  code() {\n    console.log(\"this:\", this);\n    return this.x + this.y;\n  }\n}\nvar vivek = new Dev(1, 2); /*create instance of class Dev*/\nvar sum = vivek.code(); /*call method sum on the object vivek*/\nconsole.log(sum); /*prints 3*/\nconsole.log(vivek instanceof Dev); /*returns true*/\n```\n\n\\*Let me also show the **console** \\*\n\n![1st-pic.png](../../../src/assets/blogs/classes-in-js/img-2.png)\n\nLet me explain the code here in stepwise manner..\n\n1. first I declared a class.\n2. then I instantiate the class with object name vivek passing the constructor 2 integers.\n3. on opening the console, we can see all the outputs\n\nBut, let's examine the object `vivek` in more detail. When we expand it in the console, we might see something like this:\n\n```javascript\nvivek: {\n  x: 1,\n  y: 2,\n  [[Prototype]]: Object\n}\n```\n\nNotice that the object has three properties:\n\n- The values `x` and `y` we passed to the constructor\n- A special `[[Prototype]]` property (displayed as `__proto__` in some browsers)\n\nWhen we expand the `[[Prototype]]` property, we find:\n\n```javascript\n[[Prototype]]: {\n  code: ƒ(),\n  constructor: class Dev,\n  [[Prototype]]: Object\n}\n```\n\nThis reveals something interesting: the `code()` method we defined in our class isn't stored directly on the object itself, but rather on its prototype! This is a key insight into how JavaScript classes actually work under the hood.\n\n---\n\n```javascript\nfunction Dev(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nDev.prototype.code = function () {\n  /*code is a function which is added to prototype of Dev function*/\n  console.log(\"this:\", this);\n  return this.x + this.y;\n};\n\nvar vivek = new Dev(1, 2); /*instantiate a new object*/\nvar sum = vivek.code(); /*call the method on the instance*/\nconsole.log(sum); /*prints the return value*/\nconsole.log(vivek); /*prints the vivek object*/\n```\n\n\\*lets look at the \\*\\*console \\*_as well_\n\n![2nd-pic.png](../../../src/assets/blogs/classes-in-js/img-3.png)\n\nLet's click on the **drop down** and now see the **MAGIC!!**\n\n![5th-pic.png](../../../src/assets/blogs/classes-in-js/img-5.png)\n\nFirst let's just go over the **code**..\n\n1. declare a function. Here it can also be called a constructor function because it instantiates an object.\n2. next create a function called \\*\\*code \\*\\* and assign it to **Dev.prototype**\n3. now, instantiate the object called **vivek** and call the method inside it.\n\n<img src=\"../../../src/assets/blogs/classes-in-js/img-4.gif\" alt=\"img-6.gif\" class=\"mx-auto\" />\n\nThe console output for this function constructor approach is remarkably similar to the class example. Let's break down the `vivek` object created using the function constructor:\n\nWhen we inspect the `vivek` object, we see its own properties (`x` and `y`) and its internal `[[Prototype]]` link:\n\n## Inspecting the Function Constructor Object\n\nThe object structure here mirrors what we saw with the **class-based** object:\n\nWhen examining the object in your browser's console, you'll notice:\n\n1. **Instance properties** - Direct properties like `x`, `y` appear at the top level\n2. **Prototype chain** - Expanding the [[Prototype]] dropdown reveals:\n   - The `code()` method we added via `Developer.prototype.code`\n   - The constructor reference pointing back to our `Developer` function\n\nThis structure confirms that function constructors and ES6 classes create identical prototype chains behind the scenes.\n\n> Doesn't it totally resemble the class? The answer is quite clear and a huge **YES!!**\n\nThe function constructor pattern in pre-ES6 JavaScript is equivalent to class declarations in ES6. We can see that:\n\n- Instance variables are declared on `this` in the Function object\n- Methods are defined on the Function.prototype object\n- A reference is created automatically between Function and Function.prototype objects through the prototype chain during instantiation with the `new` keyword\n\n> Doesn't it totally resemble the class ? The answer is quite clear and a huge **YESS!!**\n\nThe code snippet above shows declaration of Function Constructor in pre-ES6 (equivalent to class declaration in ES6). We can see that instance variables are declared on this in Function object, and the methods are defined on Function.prototype object. There will be a reference created automatically between Function and Function.prototype objects through \\_ _proto_ \\_\\_\\_\\_\\_\\_\\_\\_ property on Function object during instantiation using new keyword. The methods on Function.prototype will be called on the instance object.\n\n### Prototypical chain\n\nhere's how the prototypical chain for syntax's would look like\n\n<img src=\"../../../src/assets/blogs/classes-in-js/img-6.png\" alt=\"img-6.gif\" class=\"mx-auto\" />\n\nEssentially, we get the same prototype chain on class and Function Constructor declarations.\n\n<img src=\"../../../src/assets/blogs/classes-in-js/img-7.gif\" alt=\"gif-7.gif\" class=\"mx-auto\" />\n\n**_Result_**\n\n1. properties defined on constructor in ES6 can be mapped to properties defined on Function object in ES5.\n2. methods defined on classes in ES6 can be mapped to properties (methods) declared on Function.prototype object in ES5.\n3. class in ES6 can be thought of as an instruction to JavaScript compiler to automatically populate the prototype object\n\n<img src=\"../../../src/assets/blogs/classes-in-js/img-8.webp\" alt=\"gif-7.gif\" class=\"mx-auto\" />\n\nWith this written we officially come to the end of the b**log.** Hope you enjoyed reading it as much as i enjoyed writing it.I hope i have made these concepts clear to you . If you have any doubt's or want to criticise any point you can comment below.","src/content/blogs/my-fourth-blog.md",[22,23,24,25,26],"../../../src/assets/blogs/classes-in-js/img-1.jpeg","../../../src/assets/blogs/classes-in-js/img-2.png","../../../src/assets/blogs/classes-in-js/img-3.png","../../../src/assets/blogs/classes-in-js/img-5.png","../../icons/cover-4.svg","3a0fcc7ef8dc1a0c",{html:29,metadata:30},"<p><strong>TL;DR</strong> ECMAScript6 introduced <em>classes</em> as a syntactical sugar for creating prototype constructors. It is said to improve code readability. This blog focuses on how everything worked before classes .</p>\n<blockquote>\n<p>JavaScript is a high-level, dynamic, and loosely-typed programming language. It is highly object-oriented to the core with its prototype-based model, inspired by Self programming language.</p>\n</blockquote>\n<h2 id=\"points-to-remember\">Points to remember</h2>\n<ul>\n<li><strong>ECMAScript6</strong> had introduced class keyword as syntactic sugar on top of the (existing) prototype-based programming model, and there hasn’t happened any change to this model.</li>\n</ul>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../../src/assets/blogs/classes-in-js/img-1.jpeg&#x22;,&#x22;alt&#x22;:&#x22;blog-2.jpeg&#x22;,&#x22;index&#x22;:0}\"></p>\n<h3 id=\"class-terminology\">Class Terminology</h3>\n<ul>\n<li>class : A type of a blueprint used for making objects.</li>\n<li>object : Acts as an instance of a class. Multiple instances of a class can be created.</li>\n<li>method : The functions which lie inside of classes are called as methods of a class.</li>\n<li>constructor : A special function which is called implicitly once we create an object of a class.</li>\n</ul>\n<h3 id=\"es6-class-component-and-its-pre-es6-equivalent\">ES6 class component and its pre ES6 equivalent</h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#F97583\">class</span><span style=\"color:#B392F0\"> Dev</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  constructor</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#FFAB70\">x</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">y</span><span style=\"color:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">    this</span><span style=\"color:#E1E4E8\">.x </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> x;</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">    this</span><span style=\"color:#E1E4E8\">.y </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> y;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  code</span><span style=\"color:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"this:\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">this</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    return</span><span style=\"color:#79B8FF\"> this</span><span style=\"color:#E1E4E8\">.x </span><span style=\"color:#F97583\">+</span><span style=\"color:#79B8FF\"> this</span><span style=\"color:#E1E4E8\">.y;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">var</span><span style=\"color:#E1E4E8\"> vivek </span><span style=\"color:#F97583\">=</span><span style=\"color:#F97583\"> new</span><span style=\"color:#B392F0\"> Dev</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">/*create instance of class Dev*/</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">var</span><span style=\"color:#E1E4E8\"> sum </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> vivek.</span><span style=\"color:#B392F0\">code</span><span style=\"color:#E1E4E8\">(); </span><span style=\"color:#6A737D\">/*call method sum on the object vivek*/</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(sum); </span><span style=\"color:#6A737D\">/*prints 3*/</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(vivek </span><span style=\"color:#F97583\">instanceof</span><span style=\"color:#B392F0\"> Dev</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">/*returns true*/</span></span></code></pre>\n<p>*Let me also show the <strong>console</strong> *</p>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../../src/assets/blogs/classes-in-js/img-2.png&#x22;,&#x22;alt&#x22;:&#x22;1st-pic.png&#x22;,&#x22;index&#x22;:0}\"></p>\n<p>Let me explain the code here in stepwise manner..</p>\n<ol>\n<li>first I declared a class.</li>\n<li>then I instantiate the class with object name vivek passing the constructor 2 integers.</li>\n<li>on opening the console, we can see all the outputs</li>\n</ol>\n<p>But, let’s examine the object <code>vivek</code> in more detail. When we expand it in the console, we might see something like this:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#B392F0\">vivek</span><span style=\"color:#E1E4E8\">: {</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  x</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  y</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  [[Prototype]]: Object</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<p>Notice that the object has three properties:</p>\n<ul>\n<li>The values <code>x</code> and <code>y</code> we passed to the constructor</li>\n<li>A special <code>[[Prototype]]</code> property (displayed as <code>__proto__</code> in some browsers)</li>\n</ul>\n<p>When we expand the <code>[[Prototype]]</code> property, we find:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">[[Prototype]]: {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  code: </span><span style=\"color:#B392F0\">ƒ</span><span style=\"color:#E1E4E8\">(),</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  constructor: </span><span style=\"color:#F97583\">class</span><span style=\"color:#B392F0\"> Dev</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  [[</span><span style=\"color:#B392F0\">Prototype</span><span style=\"color:#E1E4E8\">]]: </span><span style=\"color:#B392F0\">Object</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<p>This reveals something interesting: the <code>code()</code> method we defined in our class isn’t stored directly on the object itself, but rather on its prototype! This is a key insight into how JavaScript classes actually work under the hood.</p>\n<hr>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#F97583\">function</span><span style=\"color:#B392F0\"> Dev</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#FFAB70\">x</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">y</span><span style=\"color:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  this</span><span style=\"color:#E1E4E8\">.x </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> x;</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  this</span><span style=\"color:#E1E4E8\">.y </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> y;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">Dev</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#79B8FF\">prototype</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">code</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> function</span><span style=\"color:#E1E4E8\"> () {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  /*code is a function which is added to prototype of Dev function*/</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"this:\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">this</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  return</span><span style=\"color:#79B8FF\"> this</span><span style=\"color:#E1E4E8\">.x </span><span style=\"color:#F97583\">+</span><span style=\"color:#79B8FF\"> this</span><span style=\"color:#E1E4E8\">.y;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">var</span><span style=\"color:#E1E4E8\"> vivek </span><span style=\"color:#F97583\">=</span><span style=\"color:#F97583\"> new</span><span style=\"color:#B392F0\"> Dev</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">/*instantiate a new object*/</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">var</span><span style=\"color:#E1E4E8\"> sum </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> vivek.</span><span style=\"color:#B392F0\">code</span><span style=\"color:#E1E4E8\">(); </span><span style=\"color:#6A737D\">/*call the method on the instance*/</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(sum); </span><span style=\"color:#6A737D\">/*prints the return value*/</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(vivek); </span><span style=\"color:#6A737D\">/*prints the vivek object*/</span></span></code></pre>\n<p>*lets look at the **console *<em>as well</em></p>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../../src/assets/blogs/classes-in-js/img-3.png&#x22;,&#x22;alt&#x22;:&#x22;2nd-pic.png&#x22;,&#x22;index&#x22;:0}\"></p>\n<p>Let’s click on the <strong>drop down</strong> and now see the <strong>MAGIC!!</strong></p>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../../src/assets/blogs/classes-in-js/img-5.png&#x22;,&#x22;alt&#x22;:&#x22;5th-pic.png&#x22;,&#x22;index&#x22;:0}\"></p>\n<p>First let’s just go over the <strong>code</strong>..</p>\n<ol>\n<li>declare a function. Here it can also be called a constructor function because it instantiates an object.</li>\n<li>next create a function called **code ** and assign it to <strong>Dev.prototype</strong></li>\n<li>now, instantiate the object called <strong>vivek</strong> and call the method inside it.</li>\n</ol>\n<img src=\"../../../src/assets/blogs/classes-in-js/img-4.gif\" alt=\"img-6.gif\" class=\"mx-auto\">\n<p>The console output for this function constructor approach is remarkably similar to the class example. Let’s break down the <code>vivek</code> object created using the function constructor:</p>\n<p>When we inspect the <code>vivek</code> object, we see its own properties (<code>x</code> and <code>y</code>) and its internal <code>[[Prototype]]</code> link:</p>\n<h2 id=\"inspecting-the-function-constructor-object\">Inspecting the Function Constructor Object</h2>\n<p>The object structure here mirrors what we saw with the <strong>class-based</strong> object:</p>\n<p>When examining the object in your browser’s console, you’ll notice:</p>\n<ol>\n<li><strong>Instance properties</strong> - Direct properties like <code>x</code>, <code>y</code> appear at the top level</li>\n<li><strong>Prototype chain</strong> - Expanding the [[Prototype]] dropdown reveals:\n<ul>\n<li>The <code>code()</code> method we added via <code>Developer.prototype.code</code></li>\n<li>The constructor reference pointing back to our <code>Developer</code> function</li>\n</ul>\n</li>\n</ol>\n<p>This structure confirms that function constructors and ES6 classes create identical prototype chains behind the scenes.</p>\n<blockquote>\n<p>Doesn’t it totally resemble the class? The answer is quite clear and a huge <strong>YES!!</strong></p>\n</blockquote>\n<p>The function constructor pattern in pre-ES6 JavaScript is equivalent to class declarations in ES6. We can see that:</p>\n<ul>\n<li>Instance variables are declared on <code>this</code> in the Function object</li>\n<li>Methods are defined on the Function.prototype object</li>\n<li>A reference is created automatically between Function and Function.prototype objects through the prototype chain during instantiation with the <code>new</code> keyword</li>\n</ul>\n<blockquote>\n<p>Doesn’t it totally resemble the class ? The answer is quite clear and a huge <strong>YESS!!</strong></p>\n</blockquote>\n<p>The code snippet above shows declaration of Function Constructor in pre-ES6 (equivalent to class declaration in ES6). We can see that instance variables are declared on this in Function object, and the methods are defined on Function.prototype object. There will be a reference created automatically between Function and Function.prototype objects through _ <em>proto</em> ________ property on Function object during instantiation using new keyword. The methods on Function.prototype will be called on the instance object.</p>\n<h3 id=\"prototypical-chain\">Prototypical chain</h3>\n<p>here’s how the prototypical chain for syntax’s would look like</p>\n<img src=\"../../../src/assets/blogs/classes-in-js/img-6.png\" alt=\"img-6.gif\" class=\"mx-auto\">\n<p>Essentially, we get the same prototype chain on class and Function Constructor declarations.</p>\n<img src=\"../../../src/assets/blogs/classes-in-js/img-7.gif\" alt=\"gif-7.gif\" class=\"mx-auto\">\n<p><strong><em>Result</em></strong></p>\n<ol>\n<li>properties defined on constructor in ES6 can be mapped to properties defined on Function object in ES5.</li>\n<li>methods defined on classes in ES6 can be mapped to properties (methods) declared on Function.prototype object in ES5.</li>\n<li>class in ES6 can be thought of as an instruction to JavaScript compiler to automatically populate the prototype object</li>\n</ol>\n<img src=\"../../../src/assets/blogs/classes-in-js/img-8.webp\" alt=\"gif-7.gif\" class=\"mx-auto\">\n<p>With this written we officially come to the end of the b<strong>log.</strong> Hope you enjoyed reading it as much as i enjoyed writing it.I hope i have made these concepts clear to you . If you have any doubt’s or want to criticise any point you can comment below.</p>",{headings:31,localImagePaths:49,remoteImagePaths:50,frontmatter:51,imagePaths:53},[32,36,40,43,46],{depth:33,slug:34,text:35},2,"points-to-remember","Points to remember",{depth:37,slug:38,text:39},3,"class-terminology","Class Terminology",{depth:37,slug:41,text:42},"es6-class-component-and-its-pre-es6-equivalent","ES6 class component and its pre ES6 equivalent",{depth:33,slug:44,text:45},"inspecting-the-function-constructor-object","Inspecting the Function Constructor Object",{depth:37,slug:47,text:48},"prototypical-chain","Prototypical chain",[22,23,24,25],[],{title:14,subheading:15,slug:11,publishedAt:52,readingTimeInMins:18,cover:26},["Date","2021-05-22T00:00:00.000Z"],[22,23,24,25],"my-fourth-blog.md","this-bind-arrow-fns-js",{id:55,data:57,body:62,filePath:63,assetImports:64,digest:70,rendered:71,legacyId:96},{title:58,subheading:59,cover:60,publishedAt:61,readingTimeInMins:18},"Connecting dots between 'this' keyword , bind() and arrow function in JavaScript class.","This blog explains the most common problem react developer's face while using class-based components of binding methods to objects.","__ASTRO_IMAGE_../../icons/cover-3.svg",["Date","2021-05-25T00:00:00.000Z"],"If you have ever written classes in react (now people use hooks) . Before React came up with hooks to make things simpler it had class-based components and very few functional components. Even so, the function-based components were looked down upon because their utility was far less. But now the times have changed. Maybe for the good because everywhere I go, I hear praises for functional components because,\n\n1. they have a simpler syntax\n2. they are less verbose\n3. easy to understand I might just start writing about functional components, let's stop and change our course..\n\n> **TL: DR** This blog explains the most common problem react developer's face while using class-based components of binding methods to objects. Why does the problem occur and how can it be solved\n\nEven though it may look like a **react** problem that is not the case, It is a javascript problem and here is how u can understand it better.\n\n## this Keyword\n\nWhat is more important to understand about the **this** keyword is that it very much depends upon the context in which it lies. It is very different to the likes of other **OOP** languages as **JAVA** or **C++**.\n\n![blog-3.jpg](../../../src/assets/blogs/this-bind-arrow-fns-js/img-1.jpeg)\n\n```javascript\nclass Dev {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  code() {\n    console.log(this);\n    console.log(this.x + this.y);\n  }\n}\nvar vivek = new Dev(1, 2); /*create instance of class Dev*/\nvivek.code(); /*calling method of the instance*/\n```\n\nlet me also show the **console**..\n\n![1st-pic.png](../../../src/assets/blogs/this-bind-arrow-fns-js/img-2.png)\n\nHere we can see the output, where first line prints the object `vivek` ; we can recognize is since its shows the value we had passed to the object when we instantiated it. the next line prints the sum of the values we had passed.\n\nNow, lets add couple of lines, to the code..\n\n```javascript\nclass Dev {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  code() {\n    console.log(this);\n    console.log(this.x + this.y);\n  }\n}\nvar vivek = new Dev(1, 2); /*create instance of class Dev*/\nvivek.code(); /*calling method of the instance*/\nvar call =\n  vivek.code; /*assigning the instance's method to another variable, undefined*/\ncall(); /*TypeError: Cannot read property 'x' of undefined*/\n```\n\nlet's checkout the output..\n\n![pic-2.png](../../../src/assets/blogs/this-bind-arrow-fns-js/img-3.png)\n\nThe output prints\n\n1. `undefined` on first line.\n2. TypeError: Cannot read property 'x' of undefined\n\n**Why does this happen?**  \nlet's see what we did,\n\n1. First we declare a `var` named `call` and assign it the value `vivek.code`i.e the method inside the instance object.\n2. Then we invoke the `call` variable. As i said earlier the `this` keyword works under context, and here we have assigned the function the the variable **call** without any context. Hence , the function acts as a stand-alone function. This is the most confusing part and took me time to understand because i was comparing it to other **OOP** languages.  \n   **READ IT AGAIN**  \n   The variable `call` contains a stand-alone function which doesn't have any parent or any other context hence when I print `this` it prints `undefined`. And that is the reason why we get the next **error** that says `TypeError: Cannot read property 'x' of undefined`, since we are calling `x` on `undefined`.\n\n# Solution to above problem\n\n## using bind()\n\nLet me add a single line to the code..\n\n```javascript\nclass Dev {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n    this.code = this.code.bind(this); /*bind the method to the object*/\n  }\n\n  code() {\n    console.log(this);\n    console.log(this.x + this.y);\n  }\n}\nvar vivek = new Dev(1, 2); /*create instance of class Dev*/\nvivek.code(); /*calling method of the instance*/\nvar call = vivek.code; /*assigning the instance's method to another variable*/\ncall(); /*calling the method*/\n```\n\nBy adding **bind** we have added the `code()` method as an object property\n\n![pic3.png](../../../src/assets/blogs/this-bind-arrow-fns-js/img-4.png)\n\nNow, if you compare the previous images and the current image of the **console** you may see that , the object has **three properties** now inside the curly brackets `{}` compared to before where there were only **two properties**. Hence, the variable `call` will not give any error on invoking as the method it is being assigned a context of the instantiated object.(here **vivek**)\n\n## using fat arrow (ES6 syntax)\n\nlet me change the syntax of the code() method..\n\n```javascript\nclass Dev {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n    //this.code = this.code.bind(this);\n  }\n\n  code = () => {\n    console.log(this);\n    console.log(this.x + this.y);\n  };\n}\nvar vivek = new Dev(1, 2); /*create instance of class Dev*/\nvivek.code(); /*calling method of the instance*/\nvar call = vivek.code; /*assigning the instance's method to another variable*/\ncall(); /*calling the method*/\n```\n\nThe **fat arrow** method is a ES6 property of JS. The \\*\\*fat arrow \\*\\* function doesn't have a this property in itself it always refers to the outside context for binding.Hence, we do not need to bind the method, `code()` to the object , binding happens implicitly (by itself)..\n\nthe **console** output is similar to above output..\n\n### Results\n\nThis blog has comprehensively dealt with the problem of binding, why it occurs which provides a better understanding of the issue if one faces it.\n\nWith this written we officially come to the end of the blog. Hope you enjoyed reading it as much as i enjoyed writing it.I hope i have made these concepts clear to you.","src/content/blogs/my-third-blog.md",[65,66,67,68,69],"../../../src/assets/blogs/this-bind-arrow-fns-js/img-1.jpeg","../../../src/assets/blogs/this-bind-arrow-fns-js/img-2.png","../../../src/assets/blogs/this-bind-arrow-fns-js/img-3.png","../../../src/assets/blogs/this-bind-arrow-fns-js/img-4.png","../../icons/cover-3.svg","74dcecc0b4b53b43",{html:72,metadata:73},"<p>If you have ever written classes in react (now people use hooks) . Before React came up with hooks to make things simpler it had class-based components and very few functional components. Even so, the function-based components were looked down upon because their utility was far less. But now the times have changed. Maybe for the good because everywhere I go, I hear praises for functional components because,</p>\n<ol>\n<li>they have a simpler syntax</li>\n<li>they are less verbose</li>\n<li>easy to understand I might just start writing about functional components, let’s stop and change our course..</li>\n</ol>\n<blockquote>\n<p><strong>TL: DR</strong> This blog explains the most common problem react developer’s face while using class-based components of binding methods to objects. Why does the problem occur and how can it be solved</p>\n</blockquote>\n<p>Even though it may look like a <strong>react</strong> problem that is not the case, It is a javascript problem and here is how u can understand it better.</p>\n<h2 id=\"this-keyword\">this Keyword</h2>\n<p>What is more important to understand about the <strong>this</strong> keyword is that it very much depends upon the context in which it lies. It is very different to the likes of other <strong>OOP</strong> languages as <strong>JAVA</strong> or <strong>C++</strong>.</p>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../../src/assets/blogs/this-bind-arrow-fns-js/img-1.jpeg&#x22;,&#x22;alt&#x22;:&#x22;blog-3.jpg&#x22;,&#x22;index&#x22;:0}\"></p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#F97583\">class</span><span style=\"color:#B392F0\"> Dev</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  constructor</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#FFAB70\">x</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">y</span><span style=\"color:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">    this</span><span style=\"color:#E1E4E8\">.x </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> x;</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">    this</span><span style=\"color:#E1E4E8\">.y </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> y;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  code</span><span style=\"color:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">this</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">this</span><span style=\"color:#E1E4E8\">.x </span><span style=\"color:#F97583\">+</span><span style=\"color:#79B8FF\"> this</span><span style=\"color:#E1E4E8\">.y);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">var</span><span style=\"color:#E1E4E8\"> vivek </span><span style=\"color:#F97583\">=</span><span style=\"color:#F97583\"> new</span><span style=\"color:#B392F0\"> Dev</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">/*create instance of class Dev*/</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">vivek.</span><span style=\"color:#B392F0\">code</span><span style=\"color:#E1E4E8\">(); </span><span style=\"color:#6A737D\">/*calling method of the instance*/</span></span></code></pre>\n<p>let me also show the <strong>console</strong>..</p>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../../src/assets/blogs/this-bind-arrow-fns-js/img-2.png&#x22;,&#x22;alt&#x22;:&#x22;1st-pic.png&#x22;,&#x22;index&#x22;:0}\"></p>\n<p>Here we can see the output, where first line prints the object <code>vivek</code> ; we can recognize is since its shows the value we had passed to the object when we instantiated it. the next line prints the sum of the values we had passed.</p>\n<p>Now, lets add couple of lines, to the code..</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#F97583\">class</span><span style=\"color:#B392F0\"> Dev</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  constructor</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#FFAB70\">x</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">y</span><span style=\"color:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">    this</span><span style=\"color:#E1E4E8\">.x </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> x;</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">    this</span><span style=\"color:#E1E4E8\">.y </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> y;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  code</span><span style=\"color:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">this</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">this</span><span style=\"color:#E1E4E8\">.x </span><span style=\"color:#F97583\">+</span><span style=\"color:#79B8FF\"> this</span><span style=\"color:#E1E4E8\">.y);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">var</span><span style=\"color:#E1E4E8\"> vivek </span><span style=\"color:#F97583\">=</span><span style=\"color:#F97583\"> new</span><span style=\"color:#B392F0\"> Dev</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">/*create instance of class Dev*/</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">vivek.</span><span style=\"color:#B392F0\">code</span><span style=\"color:#E1E4E8\">(); </span><span style=\"color:#6A737D\">/*calling method of the instance*/</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">var</span><span style=\"color:#E1E4E8\"> call </span><span style=\"color:#F97583\">=</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  vivek.code; </span><span style=\"color:#6A737D\">/*assigning the instance's method to another variable, undefined*/</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">call</span><span style=\"color:#E1E4E8\">(); </span><span style=\"color:#6A737D\">/*TypeError: Cannot read property 'x' of undefined*/</span></span></code></pre>\n<p>let’s checkout the output..</p>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../../src/assets/blogs/this-bind-arrow-fns-js/img-3.png&#x22;,&#x22;alt&#x22;:&#x22;pic-2.png&#x22;,&#x22;index&#x22;:0}\"></p>\n<p>The output prints</p>\n<ol>\n<li><code>undefined</code> on first line.</li>\n<li>TypeError: Cannot read property ‘x’ of undefined</li>\n</ol>\n<p><strong>Why does this happen?</strong><br>\nlet’s see what we did,</p>\n<ol>\n<li>First we declare a <code>var</code> named <code>call</code> and assign it the value <code>vivek.code</code>i.e the method inside the instance object.</li>\n<li>Then we invoke the <code>call</code> variable. As i said earlier the <code>this</code> keyword works under context, and here we have assigned the function the the variable <strong>call</strong> without any context. Hence , the function acts as a stand-alone function. This is the most confusing part and took me time to understand because i was comparing it to other <strong>OOP</strong> languages.<br>\n<strong>READ IT AGAIN</strong><br>\nThe variable <code>call</code> contains a stand-alone function which doesn’t have any parent or any other context hence when I print <code>this</code> it prints <code>undefined</code>. And that is the reason why we get the next <strong>error</strong> that says <code>TypeError: Cannot read property 'x' of undefined</code>, since we are calling <code>x</code> on <code>undefined</code>.</li>\n</ol>\n<h1 id=\"solution-to-above-problem\">Solution to above problem</h1>\n<h2 id=\"using-bind\">using bind()</h2>\n<p>Let me add a single line to the code..</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#F97583\">class</span><span style=\"color:#B392F0\"> Dev</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  constructor</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#FFAB70\">x</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">y</span><span style=\"color:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">    this</span><span style=\"color:#E1E4E8\">.x </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> x;</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">    this</span><span style=\"color:#E1E4E8\">.y </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> y;</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">    this</span><span style=\"color:#E1E4E8\">.code </span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\"> this</span><span style=\"color:#E1E4E8\">.code.</span><span style=\"color:#B392F0\">bind</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">this</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">/*bind the method to the object*/</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  code</span><span style=\"color:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">this</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">this</span><span style=\"color:#E1E4E8\">.x </span><span style=\"color:#F97583\">+</span><span style=\"color:#79B8FF\"> this</span><span style=\"color:#E1E4E8\">.y);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">var</span><span style=\"color:#E1E4E8\"> vivek </span><span style=\"color:#F97583\">=</span><span style=\"color:#F97583\"> new</span><span style=\"color:#B392F0\"> Dev</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">/*create instance of class Dev*/</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">vivek.</span><span style=\"color:#B392F0\">code</span><span style=\"color:#E1E4E8\">(); </span><span style=\"color:#6A737D\">/*calling method of the instance*/</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">var</span><span style=\"color:#E1E4E8\"> call </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> vivek.code; </span><span style=\"color:#6A737D\">/*assigning the instance's method to another variable*/</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">call</span><span style=\"color:#E1E4E8\">(); </span><span style=\"color:#6A737D\">/*calling the method*/</span></span></code></pre>\n<p>By adding <strong>bind</strong> we have added the <code>code()</code> method as an object property</p>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../../src/assets/blogs/this-bind-arrow-fns-js/img-4.png&#x22;,&#x22;alt&#x22;:&#x22;pic3.png&#x22;,&#x22;index&#x22;:0}\"></p>\n<p>Now, if you compare the previous images and the current image of the <strong>console</strong> you may see that , the object has <strong>three properties</strong> now inside the curly brackets <code>{}</code> compared to before where there were only <strong>two properties</strong>. Hence, the variable <code>call</code> will not give any error on invoking as the method it is being assigned a context of the instantiated object.(here <strong>vivek</strong>)</p>\n<h2 id=\"using-fat-arrow-es6-syntax\">using fat arrow (ES6 syntax)</h2>\n<p>let me change the syntax of the code() method..</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#F97583\">class</span><span style=\"color:#B392F0\"> Dev</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  constructor</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#FFAB70\">x</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">y</span><span style=\"color:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">    this</span><span style=\"color:#E1E4E8\">.x </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> x;</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">    this</span><span style=\"color:#E1E4E8\">.y </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> y;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    //this.code = this.code.bind(this);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  code</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> () </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">this</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">this</span><span style=\"color:#E1E4E8\">.x </span><span style=\"color:#F97583\">+</span><span style=\"color:#79B8FF\"> this</span><span style=\"color:#E1E4E8\">.y);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  };</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">var</span><span style=\"color:#E1E4E8\"> vivek </span><span style=\"color:#F97583\">=</span><span style=\"color:#F97583\"> new</span><span style=\"color:#B392F0\"> Dev</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">/*create instance of class Dev*/</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">vivek.</span><span style=\"color:#B392F0\">code</span><span style=\"color:#E1E4E8\">(); </span><span style=\"color:#6A737D\">/*calling method of the instance*/</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">var</span><span style=\"color:#E1E4E8\"> call </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> vivek.code; </span><span style=\"color:#6A737D\">/*assigning the instance's method to another variable*/</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">call</span><span style=\"color:#E1E4E8\">(); </span><span style=\"color:#6A737D\">/*calling the method*/</span></span></code></pre>\n<p>The <strong>fat arrow</strong> method is a ES6 property of JS. The **fat arrow ** function doesn’t have a this property in itself it always refers to the outside context for binding.Hence, we do not need to bind the method, <code>code()</code> to the object , binding happens implicitly (by itself)..</p>\n<p>the <strong>console</strong> output is similar to above output..</p>\n<h3 id=\"results\">Results</h3>\n<p>This blog has comprehensively dealt with the problem of binding, why it occurs which provides a better understanding of the issue if one faces it.</p>\n<p>With this written we officially come to the end of the blog. Hope you enjoyed reading it as much as i enjoyed writing it.I hope i have made these concepts clear to you.</p>",{headings:74,localImagePaths:91,remoteImagePaths:92,frontmatter:93,imagePaths:95},[75,78,82,85,88],{depth:33,slug:76,text:77},"this-keyword","this Keyword",{depth:79,slug:80,text:81},1,"solution-to-above-problem","Solution to above problem",{depth:33,slug:83,text:84},"using-bind","using bind()",{depth:33,slug:86,text:87},"using-fat-arrow-es6-syntax","using fat arrow (ES6 syntax)",{depth:37,slug:89,text:90},"results","Results",[65,66,67,68],[],{title:58,subheading:59,slug:55,publishedAt:94,readingTimeInMins:18,cover:69},["Date","2021-05-25T00:00:00.000Z"],[65,66,67,68],"my-third-blog.md","prototypical-inheritance-js",{id:97,data:99,body:105,filePath:106,assetImports:107,digest:118,rendered:119,legacyId:140},{title:100,subheading:101,cover:102,publishedAt:103,readingTimeInMins:104},"Prototype's & Prototypical Inheritance in JavaScript.","Understand how inheritance works in JS with very simple examples.","__ASTRO_IMAGE_./cover-5.svg",["Date","2023-06-15T00:00:00.000Z"],5,"Hello guys, this is the first time I'm writing a blog. I decided to write this blog a day ago but couldn't find any topic. It's just so difficult to choose just one topic when all of them are interconnected to each other. It really becomes difficult to draw a line. Anyway, I've decided to write on prototypes and prototypical Inheritance in JavaScript. Hope I do justice to this topic. Let's start!! But, first time for a meme.\n\n![blog1_meme_1.jpeg](../../../src/assets/blogs/prototypical-inheritance/img-1.jpeg)\n\n---\n\n**About JavaScript**,\n\n> JavaScript is a high-level, dynamic, and loosely-typed programming language. It is highly object-oriented to the core with its prototype-based model, inspired by  \\[Self\\](https://en.wikipedia.org/wiki/Self\\_(programming\\_language)  programming language.\n\nOK the last point is **highly object-oriented to the core with its prototype-based model** let's focus on that\n\n# JavaScript Objects\n\nYou must've heard everything in JavaScript is an object. The JavaScript Object is different from what you would call an object in **Java** or **C++**. The javascript object is basically a key-value pair. Let me show you an example.\n\n```javascript\nobj1 = {\n  name: \"vivek\" /*here name is the key and vivek is the value*/,\n};\n```\n\n![pic2.png](../../../src/assets/blogs/prototypical-inheritance/img-2.png)\n\n# JavaScript Prototype's\n\nNow, if we go to the console and print the object you can see that there is a **drop down**. Let's click on that. Once you click on the drop down you will see the object properties.\n\n1. key-value pair\n2. \\_ _proto_ \\_\n\n**What is the proto property and how did it come here? We did not add the property, So how did this happen?**  \nWould you believe me if I said that JavaScript added this property to the object **obj1** of ours by itself, and it does the same thing for every different kind of object we declare? Yes it's true, we don't have anything to do with the property and it was added by JavaScript itself. Now if we click the **drop-down** corresponding to the \\_ _proto_ \\_ property we will see this..\n\n![pic1.png](../../../src/assets/blogs/prototypical-inheritance/img-3.png)\n\nThese are all the properties of the object \\_ _proto_ \\_\\_\\_\\_ . By object i mean the key  \n\\_ _proto_ \\_\\_\\_\\_ has all these listed properties which you can see right now in the corresponding picture.  \nWe can use these properties on our object **obj1** by using the **\" . \"** operator. Try this code in your editor\n\n```javascript\nobj1 = {\n  name: \"vivek\" /*here name is the key and vivek is the value*/,\n};\nconst obj1Copy = obj1.valueOf();\nconsole.log(obj1Copy);\n```\n\nOr you can directly try and access the properties on the **console**.\n\n![pic3.png](../../../src/assets/blogs/prototypical-inheritance/img-4.png)\n\nI hope i am clear about the prototype Object and the part in which you might feel that how can our object access these properties from the prototype ; we refer to a concept called prototypical inheritance in javascript.\n\n# Prototypical Inheritance in JavaScript\n\n![flowchart_1.png](../../../src/assets/blogs/prototypical-inheritance/img-5.png)\n\nThe above image will help me as I go about explaining this part called **Prototypical Inheritance in JavaScript**\n\nLet's go stepwise:\n\n1. I declare an object **obj1**.\n2. I will try to access its property name by using the following code\n\n```javascript\nobj1 = {\n  name: \"vivek\" /*here name is the key and vivek is the value*/,\n};\nconsole.log(obj1.name); /*prints vivek*/\n```\n\n1. Similarly if I want to check the value of my object I will write this code.\n\n```javascript\nobj1 = {\n  name: \"vivek\" /*here name is the key and vivek is the value*/,\n};\nconsole.log(obj1.name); /*prints vivek*/\nconsole.log(obj1.valueOf()); /*prints value of obj1*/\n```\n\n1. This property **valueOf()** was not declared in the object but was inherited from the **Object. prototype** object .\n2. when I asked for the value of the object in the **3rd statement**, the JavaScript execution engine first looked in the **current object's** i.e **obj1** properties and since it didn't find the property in the object it went to find it in **object. prototype**.\n\n---\n\n(Remember **Object. prototype** is simplicity i.e automatically linked to our object **obj1** without us doing anything. It is default JS behaviour)\n\n---\n\n1. This is where it found the property **valueOf()** and we could use it.\n2. As simple as that!!\n\n![](../../../src/assets/blogs/prototypical-inheritance/img-6.gif)\n\n# Example\n\nNow you understand how inheritance works in JS let's take one more example to make you more familiar with this concept.\n\n```javascript\nvar person1 = {\n  name: \"alphonso\",\n  getIntro: function () {\n    console.log(`My name is ${name} and i am from ${city}`);\n  },\n};\n\nvar person2 = {\n  name: \"vivek\",\n  city: \"pune\",\n  getIntro: function () {\n    console.log(`My name is ${name} and i am from ${city}`);\n  },\n};\n\nperson1.__proto__ = person2;\n```\n\nWhat we have done here is that assigned the property \\_ _proto_ \\_ of **person1** to **person2** and now the chain would look somewhat like this...\n\n![flowchart_2.png](../../../src/assets/blogs/prototypical-inheritance/img-7.png)\n\nNow, lets try to access the properties of **person1**,\n\n```javascript\nvar person1 = {\n  name: \"alphonso\",\n  getIntro: function () {\n    return `My name is ${this.name} and i am from ${this.city}`;\n  },\n};\n\nvar person2 = {\n  name: \"vivek\",\n  city: \"pune\",\n  getIntro: function () {\n    return `My name is ${this.name} and i am from ${this.city}`;\n  },\n};\n\nperson1.__proto__ = person2;\n\nconsole.log(person1.name); /*alphonso*/\nconsole.log(person1.city); /*pune*/\nconsole.log(person1.getIntro()); /*My name is alphonso and i am from pune*/\n```\n\nOR, you can also print it on the **console**..\n\n![pic-4.png](../../../src/assets/blogs/prototypical-inheritance/img-8.png)\n\nLets see what happened here:\n\n1. first I declared an object **person1** with properties name and **getIntro()**\n2. then I declared an object **person2** with properties **name,** **city** and **getIntro()**\n3. I linked the **proto** property of person1 with object **person2**.\n4. That's why when i print the city of **person1** JavaScript Exec Engine first looks in \\*\\*person1 \\*\\* and since it is not able to find it inside **person1** , it goes to person1.prototype where it finds **person2 and as a consequence finds the property person2.city**\n\n![img-9.webp](../../../src/assets/blogs/prototypical-inheritance/img-9.webp)","src/content/blogs/my-fifth-blog.md",[108,109,110,111,112,113,114,115,116,117],"../../../src/assets/blogs/prototypical-inheritance/img-1.jpeg","../../../src/assets/blogs/prototypical-inheritance/img-2.png","../../../src/assets/blogs/prototypical-inheritance/img-3.png","../../../src/assets/blogs/prototypical-inheritance/img-4.png","../../../src/assets/blogs/prototypical-inheritance/img-5.png","../../../src/assets/blogs/prototypical-inheritance/img-6.gif","../../../src/assets/blogs/prototypical-inheritance/img-7.png","../../../src/assets/blogs/prototypical-inheritance/img-8.png","../../../src/assets/blogs/prototypical-inheritance/img-9.webp","./cover-5.svg","75cc9339e1f031ac",{html:120,metadata:121},"<p>Hello guys, this is the first time I’m writing a blog. I decided to write this blog a day ago but couldn’t find any topic. It’s just so difficult to choose just one topic when all of them are interconnected to each other. It really becomes difficult to draw a line. Anyway, I’ve decided to write on prototypes and prototypical Inheritance in JavaScript. Hope I do justice to this topic. Let’s start!! But, first time for a meme.</p>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../../src/assets/blogs/prototypical-inheritance/img-1.jpeg&#x22;,&#x22;alt&#x22;:&#x22;blog1_meme_1.jpeg&#x22;,&#x22;index&#x22;:0}\"></p>\n<hr>\n<p><strong>About JavaScript</strong>,</p>\n<blockquote>\n<p>JavaScript is a high-level, dynamic, and loosely-typed programming language. It is highly object-oriented to the core with its prototype-based model, inspired by  [Self](<a href=\"https://en.wikipedia.org/wiki/Self%5C_(programming%5C_language)\">https://en.wikipedia.org/wiki/Self\\_(programming\\_language)</a>  programming language.</p>\n</blockquote>\n<p>OK the last point is <strong>highly object-oriented to the core with its prototype-based model</strong> let’s focus on that</p>\n<h1 id=\"javascript-objects\">JavaScript Objects</h1>\n<p>You must’ve heard everything in JavaScript is an object. The JavaScript Object is different from what you would call an object in <strong>Java</strong> or <strong>C++</strong>. The javascript object is basically a key-value pair. Let me show you an example.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">obj1 </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  name: </span><span style=\"color:#9ECBFF\">\"vivek\"</span><span style=\"color:#6A737D\"> /*here name is the key and vivek is the value*/</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">};</span></span></code></pre>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../../src/assets/blogs/prototypical-inheritance/img-2.png&#x22;,&#x22;alt&#x22;:&#x22;pic2.png&#x22;,&#x22;index&#x22;:0}\"></p>\n<h1 id=\"javascript-prototypes\">JavaScript Prototype’s</h1>\n<p>Now, if we go to the console and print the object you can see that there is a <strong>drop down</strong>. Let’s click on that. Once you click on the drop down you will see the object properties.</p>\n<ol>\n<li>key-value pair</li>\n<li>_ <em>proto</em> _</li>\n</ol>\n<p><strong>What is the proto property and how did it come here? We did not add the property, So how did this happen?</strong><br>\nWould you believe me if I said that JavaScript added this property to the object <strong>obj1</strong> of ours by itself, and it does the same thing for every different kind of object we declare? Yes it’s true, we don’t have anything to do with the property and it was added by JavaScript itself. Now if we click the <strong>drop-down</strong> corresponding to the _ <em>proto</em> _ property we will see this..</p>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../../src/assets/blogs/prototypical-inheritance/img-3.png&#x22;,&#x22;alt&#x22;:&#x22;pic1.png&#x22;,&#x22;index&#x22;:0}\"></p>\n<p>These are all the properties of the object _ <em>proto</em> ____ . By object i mean the key<br>\n_ <em>proto</em> ____ has all these listed properties which you can see right now in the corresponding picture.<br>\nWe can use these properties on our object <strong>obj1</strong> by using the <strong>” . ”</strong> operator. Try this code in your editor</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">obj1 </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  name: </span><span style=\"color:#9ECBFF\">\"vivek\"</span><span style=\"color:#6A737D\"> /*here name is the key and vivek is the value*/</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">};</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> obj1Copy</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> obj1.</span><span style=\"color:#B392F0\">valueOf</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(obj1Copy);</span></span></code></pre>\n<p>Or you can directly try and access the properties on the <strong>console</strong>.</p>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../../src/assets/blogs/prototypical-inheritance/img-4.png&#x22;,&#x22;alt&#x22;:&#x22;pic3.png&#x22;,&#x22;index&#x22;:0}\"></p>\n<p>I hope i am clear about the prototype Object and the part in which you might feel that how can our object access these properties from the prototype ; we refer to a concept called prototypical inheritance in javascript.</p>\n<h1 id=\"prototypical-inheritance-in-javascript\">Prototypical Inheritance in JavaScript</h1>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../../src/assets/blogs/prototypical-inheritance/img-5.png&#x22;,&#x22;alt&#x22;:&#x22;flowchart_1.png&#x22;,&#x22;index&#x22;:0}\"></p>\n<p>The above image will help me as I go about explaining this part called <strong>Prototypical Inheritance in JavaScript</strong></p>\n<p>Let’s go stepwise:</p>\n<ol>\n<li>I declare an object <strong>obj1</strong>.</li>\n<li>I will try to access its property name by using the following code</li>\n</ol>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">obj1 </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  name: </span><span style=\"color:#9ECBFF\">\"vivek\"</span><span style=\"color:#6A737D\"> /*here name is the key and vivek is the value*/</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">};</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(obj1.name); </span><span style=\"color:#6A737D\">/*prints vivek*/</span></span></code></pre>\n<ol>\n<li>Similarly if I want to check the value of my object I will write this code.</li>\n</ol>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">obj1 </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  name: </span><span style=\"color:#9ECBFF\">\"vivek\"</span><span style=\"color:#6A737D\"> /*here name is the key and vivek is the value*/</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">};</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(obj1.name); </span><span style=\"color:#6A737D\">/*prints vivek*/</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(obj1.</span><span style=\"color:#B392F0\">valueOf</span><span style=\"color:#E1E4E8\">()); </span><span style=\"color:#6A737D\">/*prints value of obj1*/</span></span></code></pre>\n<ol>\n<li>This property <strong>valueOf()</strong> was not declared in the object but was inherited from the <strong>Object. prototype</strong> object .</li>\n<li>when I asked for the value of the object in the <strong>3rd statement</strong>, the JavaScript execution engine first looked in the <strong>current object’s</strong> i.e <strong>obj1</strong> properties and since it didn’t find the property in the object it went to find it in <strong>object. prototype</strong>.</li>\n</ol>\n<hr>\n<p>(Remember <strong>Object. prototype</strong> is simplicity i.e automatically linked to our object <strong>obj1</strong> without us doing anything. It is default JS behaviour)</p>\n<hr>\n<ol>\n<li>This is where it found the property <strong>valueOf()</strong> and we could use it.</li>\n<li>As simple as that!!</li>\n</ol>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../../src/assets/blogs/prototypical-inheritance/img-6.gif&#x22;,&#x22;alt&#x22;:&#x22;&#x22;,&#x22;index&#x22;:0}\"></p>\n<h1 id=\"example\">Example</h1>\n<p>Now you understand how inheritance works in JS let’s take one more example to make you more familiar with this concept.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#F97583\">var</span><span style=\"color:#E1E4E8\"> person1 </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  name: </span><span style=\"color:#9ECBFF\">\"alphonso\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  getIntro</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#F97583\">function</span><span style=\"color:#E1E4E8\"> () {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`My name is ${</span><span style=\"color:#E1E4E8\">name</span><span style=\"color:#9ECBFF\">} and i am from ${</span><span style=\"color:#E1E4E8\">city</span><span style=\"color:#9ECBFF\">}`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  },</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">var</span><span style=\"color:#E1E4E8\"> person2 </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  name: </span><span style=\"color:#9ECBFF\">\"vivek\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  city: </span><span style=\"color:#9ECBFF\">\"pune\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  getIntro</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#F97583\">function</span><span style=\"color:#E1E4E8\"> () {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`My name is ${</span><span style=\"color:#E1E4E8\">name</span><span style=\"color:#9ECBFF\">} and i am from ${</span><span style=\"color:#E1E4E8\">city</span><span style=\"color:#9ECBFF\">}`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  },</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">person1.</span><span style=\"color:#79B8FF\">__proto__</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> person2;</span></span></code></pre>\n<p>What we have done here is that assigned the property _ <em>proto</em> _ of <strong>person1</strong> to <strong>person2</strong> and now the chain would look somewhat like this…</p>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../../src/assets/blogs/prototypical-inheritance/img-7.png&#x22;,&#x22;alt&#x22;:&#x22;flowchart_2.png&#x22;,&#x22;index&#x22;:0}\"></p>\n<p>Now, lets try to access the properties of <strong>person1</strong>,</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#F97583\">var</span><span style=\"color:#E1E4E8\"> person1 </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  name: </span><span style=\"color:#9ECBFF\">\"alphonso\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  getIntro</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#F97583\">function</span><span style=\"color:#E1E4E8\"> () {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    return</span><span style=\"color:#9ECBFF\"> `My name is ${</span><span style=\"color:#79B8FF\">this</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">name</span><span style=\"color:#9ECBFF\">} and i am from ${</span><span style=\"color:#79B8FF\">this</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">city</span><span style=\"color:#9ECBFF\">}`</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  },</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">var</span><span style=\"color:#E1E4E8\"> person2 </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  name: </span><span style=\"color:#9ECBFF\">\"vivek\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  city: </span><span style=\"color:#9ECBFF\">\"pune\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  getIntro</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#F97583\">function</span><span style=\"color:#E1E4E8\"> () {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    return</span><span style=\"color:#9ECBFF\"> `My name is ${</span><span style=\"color:#79B8FF\">this</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">name</span><span style=\"color:#9ECBFF\">} and i am from ${</span><span style=\"color:#79B8FF\">this</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">city</span><span style=\"color:#9ECBFF\">}`</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  },</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">person1.</span><span style=\"color:#79B8FF\">__proto__</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> person2;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(person1.name); </span><span style=\"color:#6A737D\">/*alphonso*/</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(person1.city); </span><span style=\"color:#6A737D\">/*pune*/</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(person1.</span><span style=\"color:#B392F0\">getIntro</span><span style=\"color:#E1E4E8\">()); </span><span style=\"color:#6A737D\">/*My name is alphonso and i am from pune*/</span></span></code></pre>\n<p>OR, you can also print it on the <strong>console</strong>..</p>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../../src/assets/blogs/prototypical-inheritance/img-8.png&#x22;,&#x22;alt&#x22;:&#x22;pic-4.png&#x22;,&#x22;index&#x22;:0}\"></p>\n<p>Lets see what happened here:</p>\n<ol>\n<li>first I declared an object <strong>person1</strong> with properties name and <strong>getIntro()</strong></li>\n<li>then I declared an object <strong>person2</strong> with properties <strong>name,</strong> <strong>city</strong> and <strong>getIntro()</strong></li>\n<li>I linked the <strong>proto</strong> property of person1 with object <strong>person2</strong>.</li>\n<li>That’s why when i print the city of <strong>person1</strong> JavaScript Exec Engine first looks in **person1 ** and since it is not able to find it inside <strong>person1</strong> , it goes to person1.prototype where it finds <strong>person2 and as a consequence finds the property person2.city</strong></li>\n</ol>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../../src/assets/blogs/prototypical-inheritance/img-9.webp&#x22;,&#x22;alt&#x22;:&#x22;img-9.webp&#x22;,&#x22;index&#x22;:0}\"></p>",{headings:122,localImagePaths:135,remoteImagePaths:136,frontmatter:137,imagePaths:139},[123,126,129,132],{depth:79,slug:124,text:125},"javascript-objects","JavaScript Objects",{depth:79,slug:127,text:128},"javascript-prototypes","JavaScript Prototype’s",{depth:79,slug:130,text:131},"prototypical-inheritance-in-javascript","Prototypical Inheritance in JavaScript",{depth:79,slug:133,text:134},"example","Example",[108,109,110,111,112,113,114,115,116],[],{title:100,subheading:101,slug:97,publishedAt:138,readingTimeInMins:104,cover:117},["Date","2023-06-15T00:00:00.000Z"],[108,109,110,111,112,113,114,115,116],"my-fifth-blog.md","reducing-bundle-size-in-react",{id:141,data:143,body:149,filePath:150,assetImports:151,digest:156,rendered:157,legacyId:202},{title:144,subheading:145,cover:146,publishedAt:147,readingTimeInMins:148},"Running React without Create React App","This blog details out, how you can run react without Create React App (CRA)","__ASTRO_IMAGE_../../icons/cover-2.svg",["Date","2022-06-20T00:00:00.000Z"],7,"Recently while working on a client project, we faced the problem of having to analyze and reduce the bundle size, improve SEO metrics like FCP and LCP, and improve the loading time for the build. The project used Webpacks for configuring `npm` packages, Babel for `jsx` and converting es6 javascript to browser-compatible JavaScript. During the run of the project, I was very surprised when I saw the control a developer can have while building a website as it was my first encounter with Webpack and I was blown away by the efficiency with which it happens.\n\n  <img src=\"../../../src/assets/blogs/reducing-bundle-size-in-react/img-1.gif\" alt=\"wwe-john-cena-surprised.gif\" class=\"mx-auto\" />\n\n# About Webpack\n\n**Webpack** is a static module bundler which processes your app by starting from the list of modules defined in its configuration file (`webpack.config.js`). Starting from these entry points, Webpack recursively builds a dependency graph that includes every module your application needs and then proceeds to bundling all of those modules into a small number of bundles - often, only one( `bundle[hash].js`) - to be loaded by the browser in your `index.html` file.\n\nBut, let us not sway away from the topic! In this article, we will see all about Webpack and in the second instalment of this blog, we will proceed to go in-depth into the topic to explore all the functionalities of this technology.\n\n### Prerequisites:\n\nTo follow the instructions in this article, you will require:\n\n- Beginner to intermediate knowledge of React\n- Basic knowledge of hooks and class-based components\n- es-modules [import](https://flaviocopes.com/es-modules/) and [exports](https://flaviocopes.com/es-modules/)\n\n# The Coding:\n\nNow that we have a slight hint of what we're going to learn, let's start with the basic building block of our application:\n\n## `React.createElement`\n\nLet's first go over how we can render `jsx` on the browser. I'm sure you know how to do this, but let us revise this topic. Here are some observations:\n\n1. In this step, the `jsx` that we write is converted to `React.createElement` objects.\n2. These objects are a part of the virtual dom (VDOM).\n3. The virtual dom (VDOM) is always in sync with the actual DOM.\n4. React uses a [diffing](https://reactjs.org/docs/reconciliation.html) algorithm to update the real DOM&gt;\n\n`React.createElement` will be our building block of choice here since we want to avoid `jsx` elements(We also have to avoid Babel since it compiees `jsx` to JavaScript objects)\n\nHere is the diagramatic representation for the `React.createElement`:\n\n![jsx-dom-flow.drawio.png](../../../src/assets/blogs/reducing-bundle-size-in-react/img-2.)\n\nEnter the following code snippet into your console:\n\n```javascript\n//eg.\nReact.createElement(\"h1\", {}, \"Hello World\");\n```\n\nLogging the above code on the console would give us the following result:\n\n![Screenshot 2022-06-16 at 6.42.01 PM.png](../../../src/assets/blogs/reducing-bundle-size-in-react/img-3.png)\n\n1. The first argument here is the type of the element eg. `div`, `h1`, etc.\n2. The second would be the props or attributes, eg. `classname`.\n3. The third is the children, eg. `text` or any other `element`.\n\n## `codesandbox`:\n\nHere is the [link](https://codesandbox.io/s/react-without-cra-uyw93j?file=/functionalComp/homepage.js) for you to experiment with this tech stack.\n\n> Note: We are going to use both class-based and functional components since I am assuming that you might be comfortable with either or both of them.\n\n## Setting up `index.html`\n\nYou can use any code editor of your choice, I would recommend `vs-code`. Enter the following snippet into your console:\n\n```javascript\n<html>\n  <head>\n    <title>React Hello World</title>\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css\"\n      integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n      crossorigin=\"anonymous\"\n    />\n    <script\n      src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/js/bootstrap.min.js\"\n      integrity=\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\"\n      crossorigin=\"anonymous\"\n    ></script>\n    <script\n      src=\"https://unpkg.com/react@18/umd/react.development.js\"\n      crossorigin\n    ></script>\n    <script\n      src=\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\"\n      crossorigin\n    ></script>\n  </head>\n  <style>\n    .text {\n      text-align: center;\n    }\n  </style>\n  <body>\n    <div id=\"like_button_container\"></div>\n    <div id=\"homepage\"></div>\n\n    <script type=\"module\" src=\"./functionalComp/homepage.js\"></script>\n    <!-- <script type=\"module\" src=\"./classBasedComp/homepage.js\"></script> -->\n  </body>\n</html>\n```\n\n- We are using `react` and `react-dom` libraries for the react development setup and Bootstrap for CSS (You can remove and provide styles in the style tag option).\n- As `react` and `react-dom` libraries are required out-of-the-box if we are going to use `react-hooks` or any React class-based components, `react-dom` can be the equivalent for the virtual dom (VDOM).\n- Bootstrap is a library that provides styles out-of-the-box. You simply have to use the class names provided by Bootstrap in your elements to apply styles.\n- I am using a `CDN` for these dependencies, but we could also initialize the repo using `npm init` and then install these as `npm libraries`(I would you to try my approach).\n- We also have a `div` element which we will use to create our root for the React app.\n- We will be linking our `homepage.js` to the script tag as it has an attribute of the type given which is assigned as a `module` element.\n\n> It is important that we give the `homepage.js` script tag an attribute of the module since it tells the compiler that the `homepage.js` is an `es-module`. This indicates whether we can import or export JavaScript files as `es-modules` according to our liking, or else it will give us an error message. Read more about `es-modules` [here](https://flaviocopes.com/es-modules/)\n\n# Setting up our homepage\n\nOur homepage that we are going to reference here is a React class-based component. Since I am not using `jsx`, I will instead use `React.createElement` to set up the homepage.\n\n- Use the following snippet to create class-based components:\n\n```javascript\nimport LikeButton from \"./like_button.js\";\nconst e = React.createElement;\n\nclass HomePage extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return e(\n      \"div\",\n      { className: \"col-8 m-auto\" },\n      \"\",\n      e(LikeButton),\n      e(\"h1\", { className: \"text\" }, \"react without CRA, babel and webpack\"),\n      e(\n        \"p\",\n        { className: \"text-center\" },\n        \" Hello Worlds of React and Webpack!\",\n      ),\n      e(\"a\", { href: \"dynamic.html\" }, \"dynamic\"),\n      e(\"hr\", null),\n      e(\"p\", { className: \"text-right\" }, \" made with ❤️ by Vivek Lokhande\"),\n    );\n  }\n}\n\nconst domContainer = document.querySelector(\"#homepage\");\nconst root = ReactDOM.createRoot(domContainer);\nroot.render(e(HomePage));\n```\n\n- Use the following snippet to create functional components:\n\n```javascript\nimport LikeButton from \"./like_button.js\";\nconst e = React.createElement;\nfunction HomePage() {\n  return e(\n    \"div\",\n    { className: \"col-8 m-auto\" },\n    \"\",\n    e(LikeButton),\n    e(\"h1\", { className: \"text\" }, \"react without CRA, babel and webpack\"),\n    e(\"p\", { className: \"text-center\" }, \" Hello Worlds of React and Webpack!\"),\n    e(\"a\", { href: \"dynamic.html\" }, \"dynamic\"),\n    e(\"hr\", null),\n    e(\"p\", { className: \"text-right\" }, \" made with ❤️ by Vivek Lokhande\"),\n  );\n}\n\nconst domContainer = document.querySelector(\"#homepage\");\nconst root = ReactDOM.createRoot(domContainer);\nroot.render(e(HomePage));\n```\n\nAt a first glance, you can notice that:\n\n1. We are able to use `es-modules` import/exports since the `homepage.js` file is a module.\n2. The given component is stateless.\n3. We are nesting our components inside a `div` element.\n4. As I mentioned before, we are going to use homepage as our root element.\n\n## Setting up our `likeButton` component\n\nUse the code given below to implement class-based components:\n\n```javascript\nconst e = React.createElement;\n\nclass LikeButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { liked: false };\n  }\n\n  render() {\n    if (this.state.liked) {\n      return e(\"p\", {}, \"You liked this.\");\n    }\n\n    return e(\n      \"button\",\n      { onClick: () => this.setState({ liked: true }) },\n      \"Like\",\n    );\n  }\n}\nexport default LikeButton;\n```\n\nUse the code given below to implement functional components:\n\n```javascript\nconst e = React.createElement;\nfunction LikeButton() {\n  const [liked, setLiked] = React.useState(false);\n\n  if (liked) {\n    return e(\"h5\", {}, \"You liked this.\");\n  } else {\n    return e(\"button\", { onClick: () => setLiked((prev) => !prev) }, \"Like\");\n  }\n}\n\nexport default LikeButton;\n```\n\nAt first glance, you can notice that:\n\n1. The given component has states.\n2. We are using the state for conditionally rendering the UI.\n\n## Adding the `dynamic.html` page\n\nCope-paste the code that is given below for your reference:\n\n```javascript\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Document</title>\n  </head>\n  <body>\n    dynamic\n  </body>\n</html>\n```\n\nNow let's look at how everything will function when put together. While working, I have opened the `index.html` file on my browser. Here's a picture given below for your reference:\n\n![react-without-cra-webpack-working.gif](../../../src/assets/blogs/reducing-bundle-size-in-react/img-4.gif)\n\n# Additional notes\n\nUse the following code to pass multiple children to `React.createElement`:\n\n```javascript\nReact.createElement(\n  \"div\",\n  { className: \"parent__div\" },\n  React.createElement(\n    \"h1\",\n    { className: \"text\" },\n    \"react without CRA, babel and webpack\",\n  ),\n  React.createElement(\n    \"p\",\n    { className: \"text\" },\n    \"Hello Worlds of React and Webpack!\",\n  ),\n);\n```\n\nYou can pass as many elements as you want. Using this syntax, you can nest elements to your liking.\n\n# Takeaways\n\n- The gif shows that since we do not have a `build.js` file and all files are fetched separately, taking away the scalability factor.\n- We can see that as we write more and more code for `jsx`, it keeps on getting cumbersome to the eye.\n- This process also goes on to show how far we have come when it comes to developing applications by setting up pipelines for apps with just one command eg. CRA (`create-react-app`)\n- As we go on increasing the complexity of the application, we will face bigger problems. For example: I tried to add `react-router` here for navigation, but had to give up on the idea in the end because of the complexity involved.\n\n# Sources\n\n[React.createElement-1](https://learn.co/lessons/react-create-element), [React.createElement-2](https://symfonycasts.com/screencast/reactjs/react-create-element), [esmodules](https://flaviocopes.com/es-modules/), [common-js modules](https://flaviocopes.com/commonjs/), [React without jsx](https://reactjs.org/docs/react-without-jsx.html), [Add React to a website](https://reactjs.org/docs/add-react-to-a-website.html)","src/content/blogs/my-second-blog.md",[152,153,154,155],"../../../src/assets/blogs/reducing-bundle-size-in-react/img-2.","../../../src/assets/blogs/reducing-bundle-size-in-react/img-3.png","../../../src/assets/blogs/reducing-bundle-size-in-react/img-4.gif","../../icons/cover-2.svg","c0976391c66c8f13",{html:158,metadata:159},"<p>Recently while working on a client project, we faced the problem of having to analyze and reduce the bundle size, improve SEO metrics like FCP and LCP, and improve the loading time for the build. The project used Webpacks for configuring <code>npm</code> packages, Babel for <code>jsx</code> and converting es6 javascript to browser-compatible JavaScript. During the run of the project, I was very surprised when I saw the control a developer can have while building a website as it was my first encounter with Webpack and I was blown away by the efficiency with which it happens.</p>\n  <img src=\"../../../src/assets/blogs/reducing-bundle-size-in-react/img-1.gif\" alt=\"wwe-john-cena-surprised.gif\" class=\"mx-auto\">\n<h1 id=\"about-webpack\">About Webpack</h1>\n<p><strong>Webpack</strong> is a static module bundler which processes your app by starting from the list of modules defined in its configuration file (<code>webpack.config.js</code>). Starting from these entry points, Webpack recursively builds a dependency graph that includes every module your application needs and then proceeds to bundling all of those modules into a small number of bundles - often, only one( <code>bundle[hash].js</code>) - to be loaded by the browser in your <code>index.html</code> file.</p>\n<p>But, let us not sway away from the topic! In this article, we will see all about Webpack and in the second instalment of this blog, we will proceed to go in-depth into the topic to explore all the functionalities of this technology.</p>\n<h3 id=\"prerequisites\">Prerequisites:</h3>\n<p>To follow the instructions in this article, you will require:</p>\n<ul>\n<li>Beginner to intermediate knowledge of React</li>\n<li>Basic knowledge of hooks and class-based components</li>\n<li>es-modules <a href=\"https://flaviocopes.com/es-modules/\">import</a> and <a href=\"https://flaviocopes.com/es-modules/\">exports</a></li>\n</ul>\n<h1 id=\"the-coding\">The Coding:</h1>\n<p>Now that we have a slight hint of what we’re going to learn, let’s start with the basic building block of our application:</p>\n<h2 id=\"reactcreateelement\"><code>React.createElement</code></h2>\n<p>Let’s first go over how we can render <code>jsx</code> on the browser. I’m sure you know how to do this, but let us revise this topic. Here are some observations:</p>\n<ol>\n<li>In this step, the <code>jsx</code> that we write is converted to <code>React.createElement</code> objects.</li>\n<li>These objects are a part of the virtual dom (VDOM).</li>\n<li>The virtual dom (VDOM) is always in sync with the actual DOM.</li>\n<li>React uses a <a href=\"https://reactjs.org/docs/reconciliation.html\">diffing</a> algorithm to update the real DOM></li>\n</ol>\n<p><code>React.createElement</code> will be our building block of choice here since we want to avoid <code>jsx</code> elements(We also have to avoid Babel since it compiees <code>jsx</code> to JavaScript objects)</p>\n<p>Here is the diagramatic representation for the <code>React.createElement</code>:</p>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../../src/assets/blogs/reducing-bundle-size-in-react/img-2.&#x22;,&#x22;alt&#x22;:&#x22;jsx-dom-flow.drawio.png&#x22;,&#x22;index&#x22;:0}\"></p>\n<p>Enter the following code snippet into your console:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#6A737D\">//eg.</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">React.</span><span style=\"color:#B392F0\">createElement</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"h1\"</span><span style=\"color:#E1E4E8\">, {}, </span><span style=\"color:#9ECBFF\">\"Hello World\"</span><span style=\"color:#E1E4E8\">);</span></span></code></pre>\n<p>Logging the above code on the console would give us the following result:</p>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../../src/assets/blogs/reducing-bundle-size-in-react/img-3.png&#x22;,&#x22;alt&#x22;:&#x22;Screenshot 2022-06-16 at 6.42.01 PM.png&#x22;,&#x22;index&#x22;:0}\"></p>\n<ol>\n<li>The first argument here is the type of the element eg. <code>div</code>, <code>h1</code>, etc.</li>\n<li>The second would be the props or attributes, eg. <code>classname</code>.</li>\n<li>The third is the children, eg. <code>text</code> or any other <code>element</code>.</li>\n</ol>\n<h2 id=\"codesandbox\"><code>codesandbox</code>:</h2>\n<p>Here is the <a href=\"https://codesandbox.io/s/react-without-cra-uyw93j?file=/functionalComp/homepage.js\">link</a> for you to experiment with this tech stack.</p>\n<blockquote>\n<p>Note: We are going to use both class-based and functional components since I am assuming that you might be comfortable with either or both of them.</p>\n</blockquote>\n<h2 id=\"setting-up-indexhtml\">Setting up <code>index.html</code></h2>\n<p>You can use any code editor of your choice, I would recommend <code>vs-code</code>. Enter the following snippet into your console:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#85E89D\">html</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  &#x3C;</span><span style=\"color:#85E89D\">head</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    &#x3C;</span><span style=\"color:#85E89D\">title</span><span style=\"color:#E1E4E8\">>React Hello World&#x3C;/</span><span style=\"color:#85E89D\">title</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    &#x3C;</span><span style=\"color:#85E89D\">link</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">      rel</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"stylesheet\"</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">      href</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css\"</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">      integrity</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">      crossorigin</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"anonymous\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    /></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    &#x3C;</span><span style=\"color:#85E89D\">script</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">      src</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/js/bootstrap.min.js\"</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">      integrity</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\"</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">      crossorigin</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"anonymous\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    >&#x3C;/</span><span style=\"color:#85E89D\">script</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    &#x3C;</span><span style=\"color:#85E89D\">script</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">      src</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"https://unpkg.com/react@18/umd/react.development.js\"</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">      crossorigin</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    >&#x3C;/</span><span style=\"color:#85E89D\">script</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    &#x3C;</span><span style=\"color:#85E89D\">script</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">      src</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\"</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">      crossorigin</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    >&#x3C;/</span><span style=\"color:#85E89D\">script</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  &#x3C;/</span><span style=\"color:#85E89D\">head</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  &#x3C;</span><span style=\"color:#85E89D\">style</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    .text {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      text</span><span style=\"color:#F97583\">-</span><span style=\"color:#E1E4E8\">align: center;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  &#x3C;/</span><span style=\"color:#85E89D\">style</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  &#x3C;</span><span style=\"color:#85E89D\">body</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    &#x3C;</span><span style=\"color:#85E89D\">div</span><span style=\"color:#B392F0\"> id</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"like_button_container\"</span><span style=\"color:#E1E4E8\">>&#x3C;/</span><span style=\"color:#85E89D\">div</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    &#x3C;</span><span style=\"color:#85E89D\">div</span><span style=\"color:#B392F0\"> id</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"homepage\"</span><span style=\"color:#E1E4E8\">>&#x3C;/</span><span style=\"color:#85E89D\">div</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    &#x3C;</span><span style=\"color:#85E89D\">script</span><span style=\"color:#B392F0\"> type</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"module\"</span><span style=\"color:#B392F0\"> src</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"./functionalComp/homepage.js\"</span><span style=\"color:#E1E4E8\">>&#x3C;/</span><span style=\"color:#85E89D\">script</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    &#x3C;!-- &#x3C;</span><span style=\"color:#85E89D\">script</span><span style=\"color:#B392F0\"> type</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"module\"</span><span style=\"color:#B392F0\"> src</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"./classBasedComp/homepage.js\"</span><span style=\"color:#E1E4E8\">>&#x3C;/</span><span style=\"color:#85E89D\">script</span><span style=\"color:#E1E4E8\">> --></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  &#x3C;/</span><span style=\"color:#85E89D\">body</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">&#x3C;/</span><span style=\"color:#85E89D\">html</span><span style=\"color:#E1E4E8\">></span></span></code></pre>\n<ul>\n<li>We are using <code>react</code> and <code>react-dom</code> libraries for the react development setup and Bootstrap for CSS (You can remove and provide styles in the style tag option).</li>\n<li>As <code>react</code> and <code>react-dom</code> libraries are required out-of-the-box if we are going to use <code>react-hooks</code> or any React class-based components, <code>react-dom</code> can be the equivalent for the virtual dom (VDOM).</li>\n<li>Bootstrap is a library that provides styles out-of-the-box. You simply have to use the class names provided by Bootstrap in your elements to apply styles.</li>\n<li>I am using a <code>CDN</code> for these dependencies, but we could also initialize the repo using <code>npm init</code> and then install these as <code>npm libraries</code>(I would you to try my approach).</li>\n<li>We also have a <code>div</code> element which we will use to create our root for the React app.</li>\n<li>We will be linking our <code>homepage.js</code> to the script tag as it has an attribute of the type given which is assigned as a <code>module</code> element.</li>\n</ul>\n<blockquote>\n<p>It is important that we give the <code>homepage.js</code> script tag an attribute of the module since it tells the compiler that the <code>homepage.js</code> is an <code>es-module</code>. This indicates whether we can import or export JavaScript files as <code>es-modules</code> according to our liking, or else it will give us an error message. Read more about <code>es-modules</code> <a href=\"https://flaviocopes.com/es-modules/\">here</a></p>\n</blockquote>\n<h1 id=\"setting-up-our-homepage\">Setting up our homepage</h1>\n<p>Our homepage that we are going to reference here is a React class-based component. Since I am not using <code>jsx</code>, I will instead use <code>React.createElement</code> to set up the homepage.</p>\n<ul>\n<li>Use the following snippet to create class-based components:</li>\n</ul>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> LikeButton </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"./like_button.js\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> e</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> React.createElement;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">class</span><span style=\"color:#B392F0\"> HomePage</span><span style=\"color:#F97583\"> extends</span><span style=\"color:#B392F0\"> React</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Component</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  constructor</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#FFAB70\">props</span><span style=\"color:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">    super</span><span style=\"color:#E1E4E8\">(props);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  render</span><span style=\"color:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    return</span><span style=\"color:#B392F0\"> e</span><span style=\"color:#E1E4E8\">(</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">      \"div\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      { className: </span><span style=\"color:#9ECBFF\">\"col-8 m-auto\"</span><span style=\"color:#E1E4E8\"> },</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">      \"\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">      e</span><span style=\"color:#E1E4E8\">(LikeButton),</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">      e</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"h1\"</span><span style=\"color:#E1E4E8\">, { className: </span><span style=\"color:#9ECBFF\">\"text\"</span><span style=\"color:#E1E4E8\"> }, </span><span style=\"color:#9ECBFF\">\"react without CRA, babel and webpack\"</span><span style=\"color:#E1E4E8\">),</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">      e</span><span style=\"color:#E1E4E8\">(</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">        \"p\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        { className: </span><span style=\"color:#9ECBFF\">\"text-center\"</span><span style=\"color:#E1E4E8\"> },</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">        \" Hello Worlds of React and Webpack!\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      ),</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">      e</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"a\"</span><span style=\"color:#E1E4E8\">, { href: </span><span style=\"color:#9ECBFF\">\"dynamic.html\"</span><span style=\"color:#E1E4E8\"> }, </span><span style=\"color:#9ECBFF\">\"dynamic\"</span><span style=\"color:#E1E4E8\">),</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">      e</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"hr\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">null</span><span style=\"color:#E1E4E8\">),</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">      e</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"p\"</span><span style=\"color:#E1E4E8\">, { className: </span><span style=\"color:#9ECBFF\">\"text-right\"</span><span style=\"color:#E1E4E8\"> }, </span><span style=\"color:#9ECBFF\">\" made with ❤️ by Vivek Lokhande\"</span><span style=\"color:#E1E4E8\">),</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    );</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> domContainer</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> document.</span><span style=\"color:#B392F0\">querySelector</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"#homepage\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> root</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> ReactDOM.</span><span style=\"color:#B392F0\">createRoot</span><span style=\"color:#E1E4E8\">(domContainer);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">root.</span><span style=\"color:#B392F0\">render</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">e</span><span style=\"color:#E1E4E8\">(HomePage));</span></span></code></pre>\n<ul>\n<li>Use the following snippet to create functional components:</li>\n</ul>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> LikeButton </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"./like_button.js\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> e</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> React.createElement;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">function</span><span style=\"color:#B392F0\"> HomePage</span><span style=\"color:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  return</span><span style=\"color:#B392F0\"> e</span><span style=\"color:#E1E4E8\">(</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    \"div\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    { className: </span><span style=\"color:#9ECBFF\">\"col-8 m-auto\"</span><span style=\"color:#E1E4E8\"> },</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    \"\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">    e</span><span style=\"color:#E1E4E8\">(LikeButton),</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">    e</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"h1\"</span><span style=\"color:#E1E4E8\">, { className: </span><span style=\"color:#9ECBFF\">\"text\"</span><span style=\"color:#E1E4E8\"> }, </span><span style=\"color:#9ECBFF\">\"react without CRA, babel and webpack\"</span><span style=\"color:#E1E4E8\">),</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">    e</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"p\"</span><span style=\"color:#E1E4E8\">, { className: </span><span style=\"color:#9ECBFF\">\"text-center\"</span><span style=\"color:#E1E4E8\"> }, </span><span style=\"color:#9ECBFF\">\" Hello Worlds of React and Webpack!\"</span><span style=\"color:#E1E4E8\">),</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">    e</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"a\"</span><span style=\"color:#E1E4E8\">, { href: </span><span style=\"color:#9ECBFF\">\"dynamic.html\"</span><span style=\"color:#E1E4E8\"> }, </span><span style=\"color:#9ECBFF\">\"dynamic\"</span><span style=\"color:#E1E4E8\">),</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">    e</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"hr\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">null</span><span style=\"color:#E1E4E8\">),</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">    e</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"p\"</span><span style=\"color:#E1E4E8\">, { className: </span><span style=\"color:#9ECBFF\">\"text-right\"</span><span style=\"color:#E1E4E8\"> }, </span><span style=\"color:#9ECBFF\">\" made with ❤️ by Vivek Lokhande\"</span><span style=\"color:#E1E4E8\">),</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  );</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> domContainer</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> document.</span><span style=\"color:#B392F0\">querySelector</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"#homepage\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> root</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> ReactDOM.</span><span style=\"color:#B392F0\">createRoot</span><span style=\"color:#E1E4E8\">(domContainer);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">root.</span><span style=\"color:#B392F0\">render</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">e</span><span style=\"color:#E1E4E8\">(HomePage));</span></span></code></pre>\n<p>At a first glance, you can notice that:</p>\n<ol>\n<li>We are able to use <code>es-modules</code> import/exports since the <code>homepage.js</code> file is a module.</li>\n<li>The given component is stateless.</li>\n<li>We are nesting our components inside a <code>div</code> element.</li>\n<li>As I mentioned before, we are going to use homepage as our root element.</li>\n</ol>\n<h2 id=\"setting-up-our-likebutton-component\">Setting up our <code>likeButton</code> component</h2>\n<p>Use the code given below to implement class-based components:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> e</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> React.createElement;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">class</span><span style=\"color:#B392F0\"> LikeButton</span><span style=\"color:#F97583\"> extends</span><span style=\"color:#B392F0\"> React</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Component</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  constructor</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#FFAB70\">props</span><span style=\"color:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">    super</span><span style=\"color:#E1E4E8\">(props);</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">    this</span><span style=\"color:#E1E4E8\">.state </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> { liked: </span><span style=\"color:#79B8FF\">false</span><span style=\"color:#E1E4E8\"> };</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  render</span><span style=\"color:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    if</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#79B8FF\">this</span><span style=\"color:#E1E4E8\">.state.liked) {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">      return</span><span style=\"color:#B392F0\"> e</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"p\"</span><span style=\"color:#E1E4E8\">, {}, </span><span style=\"color:#9ECBFF\">\"You liked this.\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">    return</span><span style=\"color:#B392F0\"> e</span><span style=\"color:#E1E4E8\">(</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">      \"button\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      { </span><span style=\"color:#B392F0\">onClick</span><span style=\"color:#E1E4E8\">: () </span><span style=\"color:#F97583\">=></span><span style=\"color:#79B8FF\"> this</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">setState</span><span style=\"color:#E1E4E8\">({ liked: </span><span style=\"color:#79B8FF\">true</span><span style=\"color:#E1E4E8\"> }) },</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">      \"Like\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    );</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">export</span><span style=\"color:#F97583\"> default</span><span style=\"color:#E1E4E8\"> LikeButton;</span></span></code></pre>\n<p>Use the code given below to implement functional components:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> e</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> React.createElement;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">function</span><span style=\"color:#B392F0\"> LikeButton</span><span style=\"color:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#E1E4E8\"> [</span><span style=\"color:#79B8FF\">liked</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">setLiked</span><span style=\"color:#E1E4E8\">] </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> React.</span><span style=\"color:#B392F0\">useState</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">false</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">  if</span><span style=\"color:#E1E4E8\"> (liked) {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    return</span><span style=\"color:#B392F0\"> e</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"h5\"</span><span style=\"color:#E1E4E8\">, {}, </span><span style=\"color:#9ECBFF\">\"You liked this.\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  } </span><span style=\"color:#F97583\">else</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    return</span><span style=\"color:#B392F0\"> e</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"button\"</span><span style=\"color:#E1E4E8\">, { </span><span style=\"color:#B392F0\">onClick</span><span style=\"color:#E1E4E8\">: () </span><span style=\"color:#F97583\">=></span><span style=\"color:#B392F0\"> setLiked</span><span style=\"color:#E1E4E8\">((</span><span style=\"color:#FFAB70\">prev</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#F97583\"> !</span><span style=\"color:#E1E4E8\">prev) }, </span><span style=\"color:#9ECBFF\">\"Like\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">export</span><span style=\"color:#F97583\"> default</span><span style=\"color:#E1E4E8\"> LikeButton;</span></span></code></pre>\n<p>At first glance, you can notice that:</p>\n<ol>\n<li>The given component has states.</li>\n<li>We are using the state for conditionally rendering the UI.</li>\n</ol>\n<h2 id=\"adding-the-dynamichtml-page\">Adding the <code>dynamic.html</code> page</h2>\n<p>Cope-paste the code that is given below for your reference:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#F97583\">&#x3C;!</span><span style=\"color:#79B8FF\">DOCTYPE</span><span style=\"color:#E1E4E8\"> html</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#85E89D\">html</span><span style=\"color:#B392F0\"> lang</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"en\"</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  &#x3C;</span><span style=\"color:#85E89D\">head</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    &#x3C;</span><span style=\"color:#85E89D\">meta</span><span style=\"color:#B392F0\"> charset</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"UTF-8\"</span><span style=\"color:#E1E4E8\"> /></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    &#x3C;</span><span style=\"color:#85E89D\">meta</span><span style=\"color:#B392F0\"> http-equiv</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"X-UA-Compatible\"</span><span style=\"color:#B392F0\"> content</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"IE=edge\"</span><span style=\"color:#E1E4E8\"> /></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    &#x3C;</span><span style=\"color:#85E89D\">meta</span><span style=\"color:#B392F0\"> name</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"viewport\"</span><span style=\"color:#B392F0\"> content</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"width=device-width, initial-scale=1.0\"</span><span style=\"color:#E1E4E8\"> /></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    &#x3C;</span><span style=\"color:#85E89D\">title</span><span style=\"color:#E1E4E8\">>Document&#x3C;/</span><span style=\"color:#85E89D\">title</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  &#x3C;/</span><span style=\"color:#85E89D\">head</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  &#x3C;</span><span style=\"color:#85E89D\">body</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    dynamic</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  &#x3C;/</span><span style=\"color:#85E89D\">body</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">&#x3C;/</span><span style=\"color:#85E89D\">html</span><span style=\"color:#E1E4E8\">></span></span></code></pre>\n<p>Now let’s look at how everything will function when put together. While working, I have opened the <code>index.html</code> file on my browser. Here’s a picture given below for your reference:</p>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../../src/assets/blogs/reducing-bundle-size-in-react/img-4.gif&#x22;,&#x22;alt&#x22;:&#x22;react-without-cra-webpack-working.gif&#x22;,&#x22;index&#x22;:0}\"></p>\n<h1 id=\"additional-notes\">Additional notes</h1>\n<p>Use the following code to pass multiple children to <code>React.createElement</code>:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">React.</span><span style=\"color:#B392F0\">createElement</span><span style=\"color:#E1E4E8\">(</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">  \"div\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  { className: </span><span style=\"color:#9ECBFF\">\"parent__div\"</span><span style=\"color:#E1E4E8\"> },</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  React.</span><span style=\"color:#B392F0\">createElement</span><span style=\"color:#E1E4E8\">(</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    \"h1\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    { className: </span><span style=\"color:#9ECBFF\">\"text\"</span><span style=\"color:#E1E4E8\"> },</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    \"react without CRA, babel and webpack\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  ),</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  React.</span><span style=\"color:#B392F0\">createElement</span><span style=\"color:#E1E4E8\">(</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    \"p\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    { className: </span><span style=\"color:#9ECBFF\">\"text\"</span><span style=\"color:#E1E4E8\"> },</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    \"Hello Worlds of React and Webpack!\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  ),</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">);</span></span></code></pre>\n<p>You can pass as many elements as you want. Using this syntax, you can nest elements to your liking.</p>\n<h1 id=\"takeaways\">Takeaways</h1>\n<ul>\n<li>The gif shows that since we do not have a <code>build.js</code> file and all files are fetched separately, taking away the scalability factor.</li>\n<li>We can see that as we write more and more code for <code>jsx</code>, it keeps on getting cumbersome to the eye.</li>\n<li>This process also goes on to show how far we have come when it comes to developing applications by setting up pipelines for apps with just one command eg. CRA (<code>create-react-app</code>)</li>\n<li>As we go on increasing the complexity of the application, we will face bigger problems. For example: I tried to add <code>react-router</code> here for navigation, but had to give up on the idea in the end because of the complexity involved.</li>\n</ul>\n<h1 id=\"sources\">Sources</h1>\n<p><a href=\"https://learn.co/lessons/react-create-element\">React.createElement-1</a>, <a href=\"https://symfonycasts.com/screencast/reactjs/react-create-element\">React.createElement-2</a>, <a href=\"https://flaviocopes.com/es-modules/\">esmodules</a>, <a href=\"https://flaviocopes.com/commonjs/\">common-js modules</a>, <a href=\"https://reactjs.org/docs/react-without-jsx.html\">React without jsx</a>, <a href=\"https://reactjs.org/docs/add-react-to-a-website.html\">Add React to a website</a></p>",{headings:160,localImagePaths:197,remoteImagePaths:198,frontmatter:199,imagePaths:201},[161,164,167,170,173,176,179,182,185,188,191,194],{depth:79,slug:162,text:163},"about-webpack","About Webpack",{depth:37,slug:165,text:166},"prerequisites","Prerequisites:",{depth:79,slug:168,text:169},"the-coding","The Coding:",{depth:33,slug:171,text:172},"reactcreateelement","React.createElement",{depth:33,slug:174,text:175},"codesandbox","codesandbox:",{depth:33,slug:177,text:178},"setting-up-indexhtml","Setting up index.html",{depth:79,slug:180,text:181},"setting-up-our-homepage","Setting up our homepage",{depth:33,slug:183,text:184},"setting-up-our-likebutton-component","Setting up our likeButton component",{depth:33,slug:186,text:187},"adding-the-dynamichtml-page","Adding the dynamic.html page",{depth:79,slug:189,text:190},"additional-notes","Additional notes",{depth:79,slug:192,text:193},"takeaways","Takeaways",{depth:79,slug:195,text:196},"sources","Sources",[152,153,154],[],{title:144,subheading:145,slug:141,publishedAt:200,readingTimeInMins:148,cover:155},["Date","2022-06-20T00:00:00.000Z"],[152,153,154],"my-second-blog.md","remix-better-forms-for-better-ux-and-dx",{id:203,data:205,body:211,filePath:212,assetImports:213,digest:224,rendered:225,legacyId:286},{title:206,subheading:207,cover:208,publishedAt:209,readingTimeInMins:210},"Remix Better Forms for Better UX and DX","Discover how Remix is revolutionizing form development for better user experience (UX) and developer experience (DX).","__ASTRO_IMAGE_../../icons/cover-1.svg",["Date","2023-06-15T00:00:00.000Z"],11,"## **Introduction**\n\nRecently I gave a talk on how things are changing around the web ecosystem, especially with React. I also explored how we can adopt better practices with writing forms.\n\nPersonally, I have been using Remix in one of the open-source products I have been working on with some talented folks at RealDevSquad. I have been loving the Remix approach with forms and what they have brought in with the [**loaders**](https://remix.run/docs/en/main/route/loader) and [**actions**](https://remix.run/docs/en/1.15.0/components/form#action)**.** It is very intuitive to the way that web was around the time of MPAs (Multi-page apps).\n\nBut why did I choose to explore this further?\n\n![image (1).jpeg](../../../src/assets/blogs/remix-better-forms-for-better-ux-and-dx/img-1.webp)\n\nI was browsing Twitter, and I saw this tweet by Dan Abramov. I was working on a Remix app that also recommends uncontrolled forms. It was a topic worth exploring. So I started my voyage to see what is the issue at hand, which approach is better, and why it is better.\n\n## **TLDR**\n\n### What is Remix?\n\n[Remix](https://remix.run/), which is also a React framework, was co-founded by ex-Twitter engineer **Michael Jackson along with Ryan Florence** in 2020. Before this, the two had been working together for years to create open-source tools based on the [JavaScript](https://analyticsindiamag.com/the-javascript-framework-that-solves-the-annoying-feature-speed-paradox/) library React that is used to build app UIs.They are also core members of the react-router team.\n\n### Some Technical Terms\n\n1. MPA\n\n   **A Multi-Page Application (MPA)** is a website consisting of multiple HTML pages, mostly rendered on a server. When you navigate to a new page, your browser requests a new page of HTML from the server.\n\n2. SPA\n\n   **A Single-Page Application (SPA)** is a website consisting of a single JavaScript application that loads in the user's browser and then renders HTML locally. SPAs may _also_ generate HTML on the server, but SPAs are unique in their ability to run your website as a JavaScript application in the browser to render a new page of HTML when you navigate. [Next.js](https://geekyants.com/hire-next-js-developers/), Nuxt.js, SvelteKit, Remix, Gatsby, and Create React App are all examples of SPA frameworks.\n\n3. PESPA\n\n   A **PESPA (Progressively enhanced Single Page App)** is a term coined by **_Kent C. Dodds_** in one of his blogs called [the webs next transition](https://www.epicweb.dev/the-webs-next-transition), where he describes a PESPA as a mix of both SPA and the MPA world which brings the best of both worlds to improve UX and DX.\n\n   ### We have divided this blog into three parts in the same way:\n\n   1. _MPA_\n   2. _SPA_\n   3. _PESPA_\n\n## **What are We Going to Cover in This Blog?**\n\nForms have existed from the time the web has existed. Over this period, we have come to write forms in multiple ways. There were a lot of things about forms that evolved with time as well, in terms of both DX (developer experience) and [UX (user experience)](https://geekyants.com/ui-ux-design-services/). For users, it was validations of the fields, clicking on focus etc. For developers, it was how easy it is to write cumbersome validations and where they should be maintaining state etc. This blog covers how we evolved w.r.t to writing and viewing forms and how Remix might be changing the way we write forms going forward.\n\n## **What are Forms?**\n\n> **_Forms are a navigation event -_** [**_Ryan Florence_**](https://reactresources.com/people/ryan-florence)\n\nIf you take a closer look at forms, they are similar to anchor tags. The only difference between the form and the anchor tag is that with the form, we can send some data to the server, whereas an anchor tag just does redirection/navigation for us.\n\n## **How Did Forms Work in the Past?**\n\nIf you see at the inception of the web when everything just happened on the server and we used to get pre-rendered HTML from the server, a form would look something like this.\n\n```html\n<form action=\"http://localhost:4130/posts\" method=\"POST\">\n  <div class=\"flex flex-col\">\n    <input type=\"hidden\" name=\"intent\" value=\"createPost\" />\n    <label for=\"input-1\"><h3>title</h3></label>\n    <input\n      type=\"text\"\n      id=\"input-1\"\n      name=\"title\"\n      placeholder=\"title\"\n      class=\"w-100\"\n    />\n    <label for=\"input-2\"><h3>description</h3></label>\n    <input type=\"text\" id=\"input-2\" name=\"description\" class=\"w-100\" />\n    <label for=\"input-3\"><h3>content</h3></label>\n    <textarea\n      name=\"content\"\n      id=\"input-3\"\n      cols=\"30\"\n      rows=\"10\"\n      name=\"content\"\n    ></textarea>\n  </div>\n  <div class=\"flex justify-end\">\n    <input type=\"submit\" value=\"Submit\" />\n  </div>\n</form>\n```\n\nThis is a very simple implementation of a form, no JavaScript. I could just link this HTML page with some CSS if I want to correspond to the class names, but that is it, I would not require much configuration. Once I make the `POST` request, I can expect the server to get the data from the database and return the data with a redirect response to the client. We can expect the responses to be in this order:\n\n- `POST` request triggers a redirect response from the server.\n- `redirect` causes the client to refresh and get the data from the server.\n\n![Screenshot 2023-06-14 at 12.04.18 PM.png](../../../src/assets/blogs/remix-better-forms-for-better-ux-and-dx/img-2.webp)\n\n![image (18).png](../../../src/assets/blogs/remix-better-forms-for-better-ux-and-dx/img-3.webp)\n\n[**Source (article by Kent C.Dodds)**](https://www.epicweb.dev/the-webs-next-transition)﻿\n\nYou can refer to the code [**here**](https://github.com/isVivek99/forms-framework-Debate/tree/master/01-mpa).\n\n### **Pros of the Approach**\n\n1. We have a simple mental model.\n2. We do not need to lot of code to write a simple form.\n3. We can add built-in HTML validations.\n4. We can expect the browser the create and send the payload over the wire to the server when we click on submit.\n\n### **Cons of the Approach**\n\n1. We cannot have custom error validations.\n2. Full page refresh is triggered on every post request.\n3. We cannot have an optimistic UI, although we can show pending UI with CSS, but we can face some limitations.\n\n## **How Did Forms Look During the SPA Era?**\n\nWe could have a debate based on the fact alone that we are past the SPA phase. I think that this would need context, and I think we are in a transition phase with different frameworks around. But I assume there is a common consensus that there was a period when we used SPAs heavily, so considering that, we are going to look at React and how we handle forms in React.\n\nWith React, we can get the state, which we can use for controlling input fields, we can easily show optimistic UI or a pending UI and we can also prevent whole page re-renders because we can use JavaScript to append data to the state.\n\nA form in React would look like this.\n\n```typescript\nimport React from \"react\";\nimport { useForm, Resolver } from \"react-hook-form\";\nimport \"./blog.css\";\n\ntype Post = { id: string; title: string; desc: string; content: string };\n\ntype FormValues = {\n  title: string;\n  desc: string;\n  content: string;\n};\n\nconst resolver: Resolver<FormValues> = async (values) => {\n\n  return {\n    values: values.title ? values : {},\n    errors: !values.title\n      ? {\n          title: {\n            type: \"required\",\n            message: \"This is required.\",\n          },\n        }\n      : !values.desc\n      ? {\n          desc: {\n            type: \"required\",\n            message: \"This is required.\",\n          },\n        }\n      : !values.content\n      ? {\n          content: {\n            type: \"required\",\n            message: \"This is required.\",\n          },\n        }\n      : {},\n  };\n};\nlet renderCount = 0;\nconst Posts = () => {\n  const [posts, setPosts] = React.useState<Array<Post>>([]);\n  const [statuses, setStatuses] = React.useState<{\n    loadingPosts: \"idle\" | \"loading\";\n    creatingPost: \"idle\" | \"loading\";\n  }>({\n    loadingPosts: \"loading\",\n    creatingPost: \"idle\",\n  });\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({ resolver });\n\n  renderCount++;\n\n  // initial load of posts\n  React.useEffect(() => {\n    fetch(\"http://localhost:4131/api/posts\")\n      .then((res) => res.json())\n      .then(({ posts }) => {\n        setPosts(posts);\n        setStatuses((old) => ({ ...old, loadingTodos: \"idle\" }));\n      });\n  }, []);\n\n  return (\n    <div className=' m-auto'>\n      renderCount:{renderCount}\n      <div className='flex'>\n        <div className='flex-basis-1-3'>\n          <ul hidden={!posts.length}>\n            {posts.map((post, i) => (\n              <li key={i}>\n                <p className='bold my-1'>{post.title}</p>\n                <p className='bold my-1'>{post.desc}</p>\n              </li>\n            ))}\n          </ul>\n        </div>\n        <div className='border-r-2 px-2 mx-2'></div>\n\n        <div className='flex-basis-2-3'>\n          <div className='border-b-2 border-color-brown'>\n            <h1>My Blog</h1>\n          </div>\n          <form\n            onSubmit={handleSubmit((data, e) => {\n              const { title, desc, content } = data;\n              e?.target.reset();\n\n              setPosts([\n                ...posts,\n                { title, desc, content, id: Math.random().toFixed(2) },\n              ]);\n\n              setStatuses((old) => ({ ...old, creatingPost: \"loading\" }));\n              fetch(`http://localhost:4131/api/posts`, {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify({ title, desc, content }),\n              })\n                .then((res) => res.json())\n                .then((data) => {\n                  setPosts((prev) => {\n                    prev[prev.length - 1] = data.post;\n                    console.log(posts);\n                    return prev;\n                  });\n\n                  setStatuses((old) => ({ ...old, creatingPost: \"idle\" }));\n                });\n            })}\n          >\n            <div className='flex flex-col'>\n              <label htmlFor='input-1'>\n                <h3>title</h3>\n              </label>\n              <input\n                id='input-1'\n                className={`w-100 ${\n                  errors.title?.message ? \"input-error\" : \"\"\n                }`}\n                data-pending={statuses.creatingPost === \"loading\"}\n                {...register(\"title\", { required: \"this field is required.\" })}\n              />\n\n              <p className='error'>{errors.title?.message}</p>\n              <label htmlFor='input-2'>\n                <h3>desc</h3>\n              </label>\n              <input\n                id='input-2'\n                className={`w-100 ${errors.desc?.message ? \"input-error\" : \"\"}`}\n                data-pending={statuses.creatingPost === \"loading\"}\n                {...register(\"desc\", {\n                  required: \"this field is required.\",\n                })}\n              />\n              <p className='error'>{errors.desc?.message}</p>\n              <label htmlFor='input-3'>\n                <h3>content</h3>\n              </label>\n              <textarea\n                id='input-3'\n                cols={30}\n                rows={10}\n                className={`w-100 ${\n                  errors.content?.message ? \"input-error\" : \"\"\n                }`}\n                {...register(\"content\", {\n                  required: \"this filed is also required.\",\n                })}\n                data-pending={statuses.creatingPost === \"loading\"}\n              ></textarea>\n              <p className='error'>{errors.content?.message}</p>\n            </div>\n            <div className='flex justify-end'>\n              <button\n                type='submit'\n                disabled={statuses.creatingPost === \"loading\"}\n              >\n                create post\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n```\n\nYou can notice that I am not using any controlled input field. Instead, I am using a library called `react-hook-form`**,** which uses refs instead of state, which means we are considerably reducing the re-renders that we would have gotten with using controlled forms.\n\nWe can expect the responses to be in this order:\n\n- `POST` request triggers a status `OK`, the response from the server.\n- the received response can be added to the posts list on success. Else we can show an error alert.\n\n![Screenshot 2023-06-14 at 12.04.52 PM.png](../../../src/assets/blogs/remix-better-forms-for-better-ux-and-dx/img-4.webp)\n\nThis is how the form would work in the case of our SPA.\n\n![image (19).png](../../../src/assets/blogs/remix-better-forms-for-better-ux-and-dx/img-5.webp)\n\nYou can refer to the code [**here**](../../../src/assets/blogs/remix-better-forms-for-better-ux-and-dx/img-6.webp)**.**\n\n### **Pros of the Approach**\n\n1. We can add optimistic UI.\n2. We can add pending UI.\n3. We can add built-in HTML validations.\n\n### **Cons of the Approach**\n\n1. We don't have a simple mental model.\n2. We have to create a request, prevent the default behavior of the browser and send data to a URL by creating the payload, which the browser can also do, but we hijack it and make it more difficult.\n3. We have to write a lot of code for the form to work (130 lines here).\n\n## **A Better Way to Write Forms?**\n\nTill now, we have seen two different ways of writing forms, and both have their pros and cons. But what if I tell you that we can use the pros which we have seen at both places, plus add type safety and server-side validations in case your javascript has not loaded yet on the client? Would you believe me?\n\nWell, that is where Remix mental modal for forms comes into the picture.\n\nWith Remix, you have a function that runs on the server for different HTTP calls.\n\n![image (3).jpeg](../../../src/assets/blogs/remix-better-forms-for-better-ux-and-dx/img-7.webp)\n\nThis is a `loader` function, which runs on the server for every `GET` call.\n\n![image (4).jpeg](../../../src/assets/blogs/remix-better-forms-for-better-ux-and-dx/img-8.webp)\n\nThis is an `action` function which runs on the server when we make a `POST/ PUT/ DELETE` call to the server.\n\nThis is how the form would look like.\n\n```typescript\nexport default function Posts() {\n  // get data when the loader function runs on the mount of the                 component\n  const data = useLoaderData() as { posts: Array<Post> };\n\n  // returns errors from the action function when user submits the form\n  const errors = useActionData();\n//hook exposed by remix/react to track states of the form i.e. submitting/loading/idle\n  const transition = useTransition();\n\n  const text =\n    transition.state === \"submitting\"\n      ? \"Saving...\"\n      : transition.state === \"loading\"\n      ? \"Saved!\"\n      : \"create post\";\n\n  return (\n    <div className=\" m-auto\">\n      <div className=\"flex\">\n        <div className=\"flex-basis-1-3\">\n          <ul hidden={!data.posts.length}>\n            {data.posts.map((post, i) => (\n              <li style={{ marginBottom: \"20px\" }} key={i}>\n                <p className=\"bold my-1\">{post.title}</p>\n                <p className=\"bold my-1\">{post.desc}</p>\n              </li>\n            ))}\n          </ul>\n        </div>\n        <div className=\"mx-2 border-r-2 px-2\"></div>\n\n        <div className=\"flex-basis-2-3\">\n          <div className=\"border-color-brown border-b-2\">\n            <h1>My Blog</h1>\n          </div>\n          <Form\n            method=\"post\"\n            onSubmit={(event) => {\n              const form = event.currentTarget;\n              requestAnimationFrame(() => {\n                form.reset();\n              });\n            }}\n          >\n            <div className=\"flex flex-col\">\n              <label htmlFor=\"input-1\">\n                <h3>title</h3>\n              </label>\n              <input\n                type=\"text\"\n                id=\"input-1\"\n                className=\"w-100\"\n                autoFocus\n                data-pending={\n                  transition.state === \"submitting\" ||\n                  transition.state === \"loading\"\n                }\n                name=\"title\"\n              />\n              {errors?.title && <p className=\"error\">{errors.title}</p>}\n              <label htmlFor=\"input-2\">\n                <h3>desc</h3>\n              </label>\n              <input\n                type=\"text\"\n                id=\"input-2\"\n                className=\"w-100\"\n                name=\"desc\"\n                data-pending={\n                  transition.state === \"submitting\" ||\n                  transition.state === \"loading\"\n                }\n              />\n              {errors?.desc && <p className=\"error\">{errors.desc}</p>}\n              <label htmlFor=\"input-3\">\n                <h3>content</h3>\n              </label>\n              <textarea\n                id=\"input-3\"\n                cols={30}\n                rows={10}\n                name=\"content\"\n                data-pending={\n                  transition.state === \"submitting\" ||\n                  transition.state === \"loading\"\n                }\n              ></textarea>\n              {errors?.content && <p className=\"error\">{errors.content}</p>}\n            </div>\n            <div className=\"flex justify-end\">\n              <button\n                type=\"submit\"\n                disabled={\n                  transition.state === \"submitting\" ||\n                  transition.state === \"loading\"\n                }\n              >\n                {text}\n              </button>\n            </div>\n          </Form>\n        </div>\n      </div>\n    </div>\n  );\n}\n```\n\nThis is how you would work with the form:\n\n- You get the data from the server when the page loads using the `useLoaderData` hook.\n- You write JSX for your form, and you can use the state from the `useTransition` hook for adding optimistic /pending UI.\n- Whenever the user fills out the form and clicks on submit, the request is sent to the `action` function, which runs on the server and can validate the data using native JavasScript APIs.\n- If the request is successful, you can return a redirect response from the server, which will trigger the `useLoaderData` hook instead of a full page refresh, and you will get the latest posts from the server, which will be displayed on the screen.\n\n### **Response Sequence**\n\nThis is the way you can expect the order of responses to be when you submit the form.\n\n- A successful post request triggers a `redirect` response from the server.\n- The redirect response triggers a `get` call on the client.\n\n![Screenshot 2023-06-14 at 12.05.23 PM.png](../../../src/assets/blogs/remix-better-forms-for-better-ux-and-dx/img-9.webp)\n\nThis is how the form would work in the case of what Kent C. Dodds calls a PESPA (progressively enhanced single-page app).\n\n![image (20).png](../../../src/assets/blogs/remix-better-forms-for-better-ux-and-dx/img-10.webp)\n\nYou can refer to the code [**here**](https://github.com/isVivek99/forms-framework-Debate/tree/master/03-pespa/blog-tutorial/app/routes)**.**\n\n### **Pros of this Approach**\n\n1. We have a SPA with a mental model of an MPA, i.e. old web and new web combined.\n2. We can add optimistic UI.\n3. We can add pending UI.\n4. We can add custom validations on the server as well as on the client by using `react-hook-form`.\n5. We can see the form is smaller compared to the old react form (100 lines).\n\n### **Cons of this Approach**\n\n1. I personally think that there is a drastic change in the mental model and it will be difficult to get accustomed to.\n\n## **Conclusion**\n\nI think that with RSC(React Server Components) coming in, we are already moving more toward the server. The React team feels that for new devs coming in, the server is the best place to start instead of the client. And I am up for it.","src/content/blogs/my-first-blog.md",[214,215,216,217,218,219,220,221,222,223],"../../../src/assets/blogs/remix-better-forms-for-better-ux-and-dx/img-1.webp","../../../src/assets/blogs/remix-better-forms-for-better-ux-and-dx/img-2.webp","../../../src/assets/blogs/remix-better-forms-for-better-ux-and-dx/img-3.webp","../../../src/assets/blogs/remix-better-forms-for-better-ux-and-dx/img-4.webp","../../../src/assets/blogs/remix-better-forms-for-better-ux-and-dx/img-5.webp","../../../src/assets/blogs/remix-better-forms-for-better-ux-and-dx/img-7.webp","../../../src/assets/blogs/remix-better-forms-for-better-ux-and-dx/img-8.webp","../../../src/assets/blogs/remix-better-forms-for-better-ux-and-dx/img-9.webp","../../../src/assets/blogs/remix-better-forms-for-better-ux-and-dx/img-10.webp","../../icons/cover-1.svg","254e5f53c7fa4cf3",{html:226,metadata:227},"<h2 id=\"introduction\"><strong>Introduction</strong></h2>\n<p>Recently I gave a talk on how things are changing around the web ecosystem, especially with React. I also explored how we can adopt better practices with writing forms.</p>\n<p>Personally, I have been using Remix in one of the open-source products I have been working on with some talented folks at RealDevSquad. I have been loving the Remix approach with forms and what they have brought in with the <a href=\"https://remix.run/docs/en/main/route/loader\"><strong>loaders</strong></a> and <a href=\"https://remix.run/docs/en/1.15.0/components/form#action\"><strong>actions</strong></a><strong>.</strong> It is very intuitive to the way that web was around the time of MPAs (Multi-page apps).</p>\n<p>But why did I choose to explore this further?</p>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../../src/assets/blogs/remix-better-forms-for-better-ux-and-dx/img-1.webp&#x22;,&#x22;alt&#x22;:&#x22;image (1).jpeg&#x22;,&#x22;index&#x22;:0}\"></p>\n<p>I was browsing Twitter, and I saw this tweet by Dan Abramov. I was working on a Remix app that also recommends uncontrolled forms. It was a topic worth exploring. So I started my voyage to see what is the issue at hand, which approach is better, and why it is better.</p>\n<h2 id=\"tldr\"><strong>TLDR</strong></h2>\n<h3 id=\"what-is-remix\">What is Remix?</h3>\n<p><a href=\"https://remix.run/\">Remix</a>, which is also a React framework, was co-founded by ex-Twitter engineer <strong>Michael Jackson along with Ryan Florence</strong> in 2020. Before this, the two had been working together for years to create open-source tools based on the <a href=\"https://analyticsindiamag.com/the-javascript-framework-that-solves-the-annoying-feature-speed-paradox/\">JavaScript</a> library React that is used to build app UIs.They are also core members of the react-router team.</p>\n<h3 id=\"some-technical-terms\">Some Technical Terms</h3>\n<ol>\n<li>\n<p>MPA</p>\n<p><strong>A Multi-Page Application (MPA)</strong> is a website consisting of multiple HTML pages, mostly rendered on a server. When you navigate to a new page, your browser requests a new page of HTML from the server.</p>\n</li>\n<li>\n<p>SPA</p>\n<p><strong>A Single-Page Application (SPA)</strong> is a website consisting of a single JavaScript application that loads in the user’s browser and then renders HTML locally. SPAs may <em>also</em> generate HTML on the server, but SPAs are unique in their ability to run your website as a JavaScript application in the browser to render a new page of HTML when you navigate. <a href=\"https://geekyants.com/hire-next-js-developers/\">Next.js</a>, Nuxt.js, SvelteKit, Remix, Gatsby, and Create React App are all examples of SPA frameworks.</p>\n</li>\n<li>\n<p>PESPA</p>\n<p>A <strong>PESPA (Progressively enhanced Single Page App)</strong> is a term coined by <strong><em>Kent C. Dodds</em></strong> in one of his blogs called <a href=\"https://www.epicweb.dev/the-webs-next-transition\">the webs next transition</a>, where he describes a PESPA as a mix of both SPA and the MPA world which brings the best of both worlds to improve UX and DX.</p>\n<h3 id=\"we-have-divided-this-blog-into-three-parts-in-the-same-way\">We have divided this blog into three parts in the same way:</h3>\n<ol>\n<li><em>MPA</em></li>\n<li><em>SPA</em></li>\n<li><em>PESPA</em></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"what-are-we-going-to-cover-in-this-blog\"><strong>What are We Going to Cover in This Blog?</strong></h2>\n<p>Forms have existed from the time the web has existed. Over this period, we have come to write forms in multiple ways. There were a lot of things about forms that evolved with time as well, in terms of both DX (developer experience) and <a href=\"https://geekyants.com/ui-ux-design-services/\">UX (user experience)</a>. For users, it was validations of the fields, clicking on focus etc. For developers, it was how easy it is to write cumbersome validations and where they should be maintaining state etc. This blog covers how we evolved w.r.t to writing and viewing forms and how Remix might be changing the way we write forms going forward.</p>\n<h2 id=\"what-are-forms\"><strong>What are Forms?</strong></h2>\n<blockquote>\n<p><strong><em>Forms are a navigation event -</em></strong> <a href=\"https://reactresources.com/people/ryan-florence\"><strong><em>Ryan Florence</em></strong></a></p>\n</blockquote>\n<p>If you take a closer look at forms, they are similar to anchor tags. The only difference between the form and the anchor tag is that with the form, we can send some data to the server, whereas an anchor tag just does redirection/navigation for us.</p>\n<h2 id=\"how-did-forms-work-in-the-past\"><strong>How Did Forms Work in the Past?</strong></h2>\n<p>If you see at the inception of the web when everything just happened on the server and we used to get pre-rendered HTML from the server, a form would look something like this.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#85E89D\">form</span><span style=\"color:#B392F0\"> action</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"http://localhost:4130/posts\"</span><span style=\"color:#B392F0\"> method</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"POST\"</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  &#x3C;</span><span style=\"color:#85E89D\">div</span><span style=\"color:#B392F0\"> class</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"flex flex-col\"</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    &#x3C;</span><span style=\"color:#85E89D\">input</span><span style=\"color:#B392F0\"> type</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"hidden\"</span><span style=\"color:#B392F0\"> name</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"intent\"</span><span style=\"color:#B392F0\"> value</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"createPost\"</span><span style=\"color:#E1E4E8\"> /></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    &#x3C;</span><span style=\"color:#85E89D\">label</span><span style=\"color:#B392F0\"> for</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"input-1\"</span><span style=\"color:#E1E4E8\">>&#x3C;</span><span style=\"color:#85E89D\">h3</span><span style=\"color:#E1E4E8\">>title&#x3C;/</span><span style=\"color:#85E89D\">h3</span><span style=\"color:#E1E4E8\">>&#x3C;/</span><span style=\"color:#85E89D\">label</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    &#x3C;</span><span style=\"color:#85E89D\">input</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">      type</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"text\"</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">      id</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"input-1\"</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">      name</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"title\"</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">      placeholder</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"title\"</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">      class</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"w-100\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    /></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    &#x3C;</span><span style=\"color:#85E89D\">label</span><span style=\"color:#B392F0\"> for</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"input-2\"</span><span style=\"color:#E1E4E8\">>&#x3C;</span><span style=\"color:#85E89D\">h3</span><span style=\"color:#E1E4E8\">>description&#x3C;/</span><span style=\"color:#85E89D\">h3</span><span style=\"color:#E1E4E8\">>&#x3C;/</span><span style=\"color:#85E89D\">label</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    &#x3C;</span><span style=\"color:#85E89D\">input</span><span style=\"color:#B392F0\"> type</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"text\"</span><span style=\"color:#B392F0\"> id</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"input-2\"</span><span style=\"color:#B392F0\"> name</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"description\"</span><span style=\"color:#B392F0\"> class</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"w-100\"</span><span style=\"color:#E1E4E8\"> /></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    &#x3C;</span><span style=\"color:#85E89D\">label</span><span style=\"color:#B392F0\"> for</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"input-3\"</span><span style=\"color:#E1E4E8\">>&#x3C;</span><span style=\"color:#85E89D\">h3</span><span style=\"color:#E1E4E8\">>content&#x3C;/</span><span style=\"color:#85E89D\">h3</span><span style=\"color:#E1E4E8\">>&#x3C;/</span><span style=\"color:#85E89D\">label</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    &#x3C;</span><span style=\"color:#85E89D\">textarea</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">      name</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"content\"</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">      id</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"input-3\"</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">      cols</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"30\"</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">      rows</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"10\"</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">      name</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"content\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    >&#x3C;/</span><span style=\"color:#85E89D\">textarea</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  &#x3C;/</span><span style=\"color:#85E89D\">div</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  &#x3C;</span><span style=\"color:#85E89D\">div</span><span style=\"color:#B392F0\"> class</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"flex justify-end\"</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    &#x3C;</span><span style=\"color:#85E89D\">input</span><span style=\"color:#B392F0\"> type</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"submit\"</span><span style=\"color:#B392F0\"> value</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"Submit\"</span><span style=\"color:#E1E4E8\"> /></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  &#x3C;/</span><span style=\"color:#85E89D\">div</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">&#x3C;/</span><span style=\"color:#85E89D\">form</span><span style=\"color:#E1E4E8\">></span></span></code></pre>\n<p>This is a very simple implementation of a form, no JavaScript. I could just link this HTML page with some CSS if I want to correspond to the class names, but that is it, I would not require much configuration. Once I make the <code>POST</code> request, I can expect the server to get the data from the database and return the data with a redirect response to the client. We can expect the responses to be in this order:</p>\n<ul>\n<li><code>POST</code> request triggers a redirect response from the server.</li>\n<li><code>redirect</code> causes the client to refresh and get the data from the server.</li>\n</ul>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../../src/assets/blogs/remix-better-forms-for-better-ux-and-dx/img-2.webp&#x22;,&#x22;alt&#x22;:&#x22;Screenshot 2023-06-14 at 12.04.18 PM.png&#x22;,&#x22;index&#x22;:0}\"></p>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../../src/assets/blogs/remix-better-forms-for-better-ux-and-dx/img-3.webp&#x22;,&#x22;alt&#x22;:&#x22;image (18).png&#x22;,&#x22;index&#x22;:0}\"></p>\n<p><a href=\"https://www.epicweb.dev/the-webs-next-transition\"><strong>Source (article by Kent C.Dodds)</strong></a>﻿</p>\n<p>You can refer to the code <a href=\"https://github.com/isVivek99/forms-framework-Debate/tree/master/01-mpa\"><strong>here</strong></a>.</p>\n<h3 id=\"pros-of-the-approach\"><strong>Pros of the Approach</strong></h3>\n<ol>\n<li>We have a simple mental model.</li>\n<li>We do not need to lot of code to write a simple form.</li>\n<li>We can add built-in HTML validations.</li>\n<li>We can expect the browser the create and send the payload over the wire to the server when we click on submit.</li>\n</ol>\n<h3 id=\"cons-of-the-approach\"><strong>Cons of the Approach</strong></h3>\n<ol>\n<li>We cannot have custom error validations.</li>\n<li>Full page refresh is triggered on every post request.</li>\n<li>We cannot have an optimistic UI, although we can show pending UI with CSS, but we can face some limitations.</li>\n</ol>\n<h2 id=\"how-did-forms-look-during-the-spa-era\"><strong>How Did Forms Look During the SPA Era?</strong></h2>\n<p>We could have a debate based on the fact alone that we are past the SPA phase. I think that this would need context, and I think we are in a transition phase with different frameworks around. But I assume there is a common consensus that there was a period when we used SPAs heavily, so considering that, we are going to look at React and how we handle forms in React.</p>\n<p>With React, we can get the state, which we can use for controlling input fields, we can easily show optimistic UI or a pending UI and we can also prevent whole page re-renders because we can use JavaScript to append data to the state.</p>\n<p>A form in React would look like this.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> React </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"react\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { useForm, Resolver } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"react-hook-form\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#9ECBFF\"> \"./blog.css\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">type</span><span style=\"color:#B392F0\"> Post</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#FFAB70\">id</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#FFAB70\">title</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#FFAB70\">desc</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#FFAB70\">content</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\"> };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">type</span><span style=\"color:#B392F0\"> FormValues</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">  title</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">  desc</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">  content</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> resolver</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> Resolver</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">FormValues</span><span style=\"color:#E1E4E8\">> </span><span style=\"color:#F97583\">=</span><span style=\"color:#F97583\"> async</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#FFAB70\">values</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">  return</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    values: values.title </span><span style=\"color:#F97583\">?</span><span style=\"color:#E1E4E8\"> values </span><span style=\"color:#F97583\">:</span><span style=\"color:#E1E4E8\"> {},</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    errors: </span><span style=\"color:#F97583\">!</span><span style=\"color:#E1E4E8\">values.title</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">      ?</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">          title: {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">            type: </span><span style=\"color:#9ECBFF\">\"required\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">            message: </span><span style=\"color:#9ECBFF\">\"This is required.\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">          },</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        }</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">      :</span><span style=\"color:#F97583\"> !</span><span style=\"color:#E1E4E8\">values.desc</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">      ?</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">          desc: {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">            type: </span><span style=\"color:#9ECBFF\">\"required\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">            message: </span><span style=\"color:#9ECBFF\">\"This is required.\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">          },</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        }</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">      :</span><span style=\"color:#F97583\"> !</span><span style=\"color:#E1E4E8\">values.content</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">      ?</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">          content: {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">            type: </span><span style=\"color:#9ECBFF\">\"required\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">            message: </span><span style=\"color:#9ECBFF\">\"This is required.\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">          },</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        }</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">      :</span><span style=\"color:#E1E4E8\"> {},</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  };</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">};</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">let</span><span style=\"color:#E1E4E8\"> renderCount </span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\"> 0</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> Posts</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> () </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#E1E4E8\"> [</span><span style=\"color:#79B8FF\">posts</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">setPosts</span><span style=\"color:#E1E4E8\">] </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> React.</span><span style=\"color:#B392F0\">useState</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">Array</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">Post</span><span style=\"color:#E1E4E8\">>>([]);</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#E1E4E8\"> [</span><span style=\"color:#79B8FF\">statuses</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">setStatuses</span><span style=\"color:#E1E4E8\">] </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> React.</span><span style=\"color:#B392F0\">useState</span><span style=\"color:#E1E4E8\">&#x3C;{</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    loadingPosts</span><span style=\"color:#F97583\">:</span><span style=\"color:#9ECBFF\"> \"idle\"</span><span style=\"color:#F97583\"> |</span><span style=\"color:#9ECBFF\"> \"loading\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    creatingPost</span><span style=\"color:#F97583\">:</span><span style=\"color:#9ECBFF\"> \"idle\"</span><span style=\"color:#F97583\"> |</span><span style=\"color:#9ECBFF\"> \"loading\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }>({</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    loadingPosts: </span><span style=\"color:#9ECBFF\">\"loading\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    creatingPost: </span><span style=\"color:#9ECBFF\">\"idle\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  });</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">    register</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">    handleSubmit</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    formState</span><span style=\"color:#E1E4E8\">: { </span><span style=\"color:#79B8FF\">errors</span><span style=\"color:#E1E4E8\"> },</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  } </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> useForm</span><span style=\"color:#E1E4E8\">({ resolver });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  renderCount</span><span style=\"color:#F97583\">++</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // initial load of posts</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  React.</span><span style=\"color:#B392F0\">useEffect</span><span style=\"color:#E1E4E8\">(() </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">    fetch</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"http://localhost:4131/api/posts\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      .</span><span style=\"color:#B392F0\">then</span><span style=\"color:#E1E4E8\">((</span><span style=\"color:#FFAB70\">res</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> res.</span><span style=\"color:#B392F0\">json</span><span style=\"color:#E1E4E8\">())</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      .</span><span style=\"color:#B392F0\">then</span><span style=\"color:#E1E4E8\">(({ </span><span style=\"color:#FFAB70\">posts</span><span style=\"color:#E1E4E8\"> }) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">        setPosts</span><span style=\"color:#E1E4E8\">(posts);</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">        setStatuses</span><span style=\"color:#E1E4E8\">((</span><span style=\"color:#FFAB70\">old</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> ({ </span><span style=\"color:#F97583\">...</span><span style=\"color:#E1E4E8\">old, loadingTodos: </span><span style=\"color:#9ECBFF\">\"idle\"</span><span style=\"color:#E1E4E8\"> }));</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      });</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }, []);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">  return</span><span style=\"color:#E1E4E8\"> (</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    &#x3C;</span><span style=\"color:#E1E4E8\">div className</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">' m-auto'</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">      renderCount</span><span style=\"color:#F97583\">:</span><span style=\"color:#E1E4E8\">{</span><span style=\"color:#FFAB70\">renderCount</span><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">      &#x3C;</span><span style=\"color:#E1E4E8\">div className</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'flex'</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">        &#x3C;</span><span style=\"color:#E1E4E8\">div className</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'flex-basis-1-3'</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">          &#x3C;</span><span style=\"color:#E1E4E8\">ul hidden</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">{!posts.length}</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">            {</span><span style=\"color:#FFAB70\">posts</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#FFAB70\">map</span><span style=\"color:#E1E4E8\">((</span><span style=\"color:#FFAB70\">post</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">i</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> (</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">              &#x3C;</span><span style=\"color:#E1E4E8\">li key</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">{i}</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">                &#x3C;</span><span style=\"color:#E1E4E8\">p className</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'bold my-1'</span><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\">{post.title}</span><span style=\"color:#F97583\">&#x3C;/</span><span style=\"color:#E1E4E8\">p</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">                &#x3C;</span><span style=\"color:#E1E4E8\">p className</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'bold my-1'</span><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\">{post.desc}</span><span style=\"color:#F97583\">&#x3C;/</span><span style=\"color:#E1E4E8\">p</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">              &#x3C;/</span><span style=\"color:#E1E4E8\">li</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">            ))}</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">          &#x3C;/</span><span style=\"color:#E1E4E8\">ul</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">        &#x3C;/</span><span style=\"color:#E1E4E8\">div</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">        &#x3C;</span><span style=\"color:#E1E4E8\">div className</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'border-r-2 px-2 mx-2'</span><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\">&#x3C;/</span><span style=\"color:#B392F0\">div</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">        &#x3C;</span><span style=\"color:#E1E4E8\">div className</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'flex-basis-2-3'</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">          &#x3C;</span><span style=\"color:#E1E4E8\">div className</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'border-b-2 border-color-brown'</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">            &#x3C;</span><span style=\"color:#B392F0\">h1</span><span style=\"color:#E1E4E8\">>My Blog</span><span style=\"color:#F97583\">&#x3C;/</span><span style=\"color:#E1E4E8\">h1</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">          &#x3C;/</span><span style=\"color:#E1E4E8\">div</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">          &#x3C;</span><span style=\"color:#FFAB70\">form</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">            onSubmit</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">{</span><span style=\"color:#B392F0\">handleSubmit</span><span style=\"color:#E1E4E8\">((</span><span style=\"color:#FFAB70\">data</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">e</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">              const</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#FFAB70\">title</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">desc</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">content</span><span style=\"color:#E1E4E8\"> } = </span><span style=\"color:#FFAB70\">data</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">              e</span><span style=\"color:#E1E4E8\">?.</span><span style=\"color:#B392F0\">target</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">reset</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B392F0\">              setPosts</span><span style=\"color:#E1E4E8\">([</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">                ...</span><span style=\"color:#FFAB70\">posts</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                { </span><span style=\"color:#FFAB70\">title</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">desc</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">content</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">id</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#FFAB70\">Math</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#FFAB70\">random</span><span style=\"color:#E1E4E8\">().</span><span style=\"color:#FFAB70\">toFixed</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\">) },</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">              ]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B392F0\">              setStatuses</span><span style=\"color:#E1E4E8\">((</span><span style=\"color:#FFAB70\">old</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> ({ </span><span style=\"color:#F97583\">...</span><span style=\"color:#B392F0\">old</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">creatingPost</span><span style=\"color:#F97583\">:</span><span style=\"color:#9ECBFF\"> \"loading\"</span><span style=\"color:#E1E4E8\"> }));</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">              fetch</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`http://localhost:4131/api/posts`</span><span style=\"color:#E1E4E8\">, {</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">                method</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"POST\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">                headers</span><span style=\"color:#E1E4E8\">: { </span><span style=\"color:#9ECBFF\">\"Content-Type\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"application/json\"</span><span style=\"color:#E1E4E8\"> },</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">                body</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#FFAB70\">JSON</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#FFAB70\">stringify</span><span style=\"color:#E1E4E8\">({ title, desc, content }),</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">              })</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                .</span><span style=\"color:#B392F0\">then</span><span style=\"color:#E1E4E8\">((</span><span style=\"color:#FFAB70\">res</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#B392F0\"> res</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">json</span><span style=\"color:#E1E4E8\">())</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                .</span><span style=\"color:#B392F0\">then</span><span style=\"color:#E1E4E8\">((</span><span style=\"color:#FFAB70\">data</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">                  setPosts</span><span style=\"color:#E1E4E8\">((</span><span style=\"color:#FFAB70\">prev</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">                    prev</span><span style=\"color:#E1E4E8\">[prev.</span><span style=\"color:#79B8FF\">length</span><span style=\"color:#F97583\"> -</span><span style=\"color:#79B8FF\"> 1</span><span style=\"color:#E1E4E8\">] </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> data.post;</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">                    console</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">posts</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">                    return</span><span style=\"color:#FFAB70\"> prev</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                  });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B392F0\">                  setStatuses</span><span style=\"color:#E1E4E8\">((</span><span style=\"color:#FFAB70\">old</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> ({ </span><span style=\"color:#F97583\">...</span><span style=\"color:#B392F0\">old</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">creatingPost</span><span style=\"color:#F97583\">:</span><span style=\"color:#9ECBFF\"> \"idle\"</span><span style=\"color:#E1E4E8\"> }));</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                });</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">            })}</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">          ></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">            &#x3C;</span><span style=\"color:#E1E4E8\">div className</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'flex flex-col'</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">              &#x3C;</span><span style=\"color:#E1E4E8\">label htmlFor</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'input-1'</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                &#x3C;</span><span style=\"color:#B392F0\">h3</span><span style=\"color:#E1E4E8\">>title</span><span style=\"color:#F97583\">&#x3C;/</span><span style=\"color:#E1E4E8\">h3</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">              &#x3C;/</span><span style=\"color:#E1E4E8\">label</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">              &#x3C;</span><span style=\"color:#FFAB70\">input</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                id</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'input-1'</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                className</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">{</span><span style=\"color:#9ECBFF\">`w-100 ${</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                  errors</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">title</span><span style=\"color:#9ECBFF\">?.</span><span style=\"color:#E1E4E8\">message</span><span style=\"color:#F97583\"> ?</span><span style=\"color:#9ECBFF\"> \"input-error\"</span><span style=\"color:#F97583\"> :</span><span style=\"color:#9ECBFF\"> \"\"</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">                }`</span><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                data</span><span style=\"color:#F97583\">-</span><span style=\"color:#E1E4E8\">pending</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">{statuses.creatingPost </span><span style=\"color:#F97583\">===</span><span style=\"color:#9ECBFF\"> \"loading\"</span><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                {</span><span style=\"color:#F97583\">...</span><span style=\"color:#FFAB70\">register</span><span style=\"color:#E1E4E8\">(\"</span><span style=\"color:#FFAB70\">title</span><span style=\"color:#E1E4E8\">\", { </span><span style=\"color:#FFAB70\">required</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"this field is required.\"</span><span style=\"color:#E1E4E8\"> })}</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">              /></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">              &#x3C;</span><span style=\"color:#E1E4E8\">p className</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'error'</span><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\">{errors.title?.message}</span><span style=\"color:#F97583\">&#x3C;/</span><span style=\"color:#E1E4E8\">p</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">              &#x3C;</span><span style=\"color:#E1E4E8\">label htmlFor</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'input-2'</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                &#x3C;</span><span style=\"color:#B392F0\">h3</span><span style=\"color:#E1E4E8\">>desc</span><span style=\"color:#F97583\">&#x3C;/</span><span style=\"color:#E1E4E8\">h3</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">              &#x3C;/</span><span style=\"color:#E1E4E8\">label</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">              &#x3C;</span><span style=\"color:#FFAB70\">input</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                id</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'input-2'</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                className</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">{</span><span style=\"color:#9ECBFF\">`w-100 ${</span><span style=\"color:#E1E4E8\">errors</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">desc</span><span style=\"color:#9ECBFF\">?.</span><span style=\"color:#E1E4E8\">message</span><span style=\"color:#F97583\"> ?</span><span style=\"color:#9ECBFF\"> \"input-error\"</span><span style=\"color:#F97583\"> :</span><span style=\"color:#9ECBFF\"> \"\"}`</span><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                data</span><span style=\"color:#F97583\">-</span><span style=\"color:#E1E4E8\">pending</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">{statuses.creatingPost </span><span style=\"color:#F97583\">===</span><span style=\"color:#9ECBFF\"> \"loading\"</span><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                {</span><span style=\"color:#F97583\">...</span><span style=\"color:#FFAB70\">register</span><span style=\"color:#E1E4E8\">(\"</span><span style=\"color:#FFAB70\">desc</span><span style=\"color:#E1E4E8\">\", {</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">                  required</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"this field is required.\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                })}</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">              /></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">              &#x3C;</span><span style=\"color:#E1E4E8\">p className</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'error'</span><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\">{errors.desc?.message}</span><span style=\"color:#F97583\">&#x3C;/</span><span style=\"color:#E1E4E8\">p</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">              &#x3C;</span><span style=\"color:#E1E4E8\">label htmlFor</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'input-3'</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                &#x3C;</span><span style=\"color:#B392F0\">h3</span><span style=\"color:#E1E4E8\">>content</span><span style=\"color:#F97583\">&#x3C;/</span><span style=\"color:#E1E4E8\">h3</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">              &#x3C;/</span><span style=\"color:#E1E4E8\">label</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">              &#x3C;</span><span style=\"color:#FFAB70\">textarea</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                id</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'input-3'</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                cols</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">{</span><span style=\"color:#79B8FF\">30</span><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                rows</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">{</span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                className</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">{</span><span style=\"color:#9ECBFF\">`w-100 ${</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                  errors</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">content</span><span style=\"color:#9ECBFF\">?.</span><span style=\"color:#E1E4E8\">message</span><span style=\"color:#F97583\"> ?</span><span style=\"color:#9ECBFF\"> \"input-error\"</span><span style=\"color:#F97583\"> :</span><span style=\"color:#9ECBFF\"> \"\"</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">                }`</span><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                {</span><span style=\"color:#F97583\">...</span><span style=\"color:#FFAB70\">register</span><span style=\"color:#E1E4E8\">(\"</span><span style=\"color:#FFAB70\">content</span><span style=\"color:#E1E4E8\">\", {</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">                  required</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"this filed is also required.\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                })}</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                data</span><span style=\"color:#F97583\">-</span><span style=\"color:#E1E4E8\">pending</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">{statuses.creatingPost </span><span style=\"color:#F97583\">===</span><span style=\"color:#9ECBFF\"> \"loading\"</span><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">              ></span><span style=\"color:#E1E4E8\">&#x3C;/</span><span style=\"color:#B392F0\">textarea</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">              &#x3C;</span><span style=\"color:#E1E4E8\">p className</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'error'</span><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\">{errors.content?.message}</span><span style=\"color:#F97583\">&#x3C;/</span><span style=\"color:#E1E4E8\">p</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">            &#x3C;/</span><span style=\"color:#E1E4E8\">div</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">            &#x3C;</span><span style=\"color:#E1E4E8\">div className</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'flex justify-end'</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">              &#x3C;</span><span style=\"color:#FFAB70\">button</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                type</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'submit'</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                disabled</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">{statuses.creatingPost </span><span style=\"color:#F97583\">===</span><span style=\"color:#9ECBFF\"> \"loading\"</span><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">              ></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                create </span><span style=\"color:#FFAB70\">post</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">              &#x3C;/</span><span style=\"color:#E1E4E8\">button</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">            &#x3C;/</span><span style=\"color:#E1E4E8\">div</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">          &#x3C;/</span><span style=\"color:#E1E4E8\">form</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">        &#x3C;/</span><span style=\"color:#E1E4E8\">div</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">      &#x3C;/</span><span style=\"color:#E1E4E8\">div</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    &#x3C;/</span><span style=\"color:#E1E4E8\">div</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  );</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">};</span></span></code></pre>\n<p>You can notice that I am not using any controlled input field. Instead, I am using a library called <code>react-hook-form</code><strong>,</strong> which uses refs instead of state, which means we are considerably reducing the re-renders that we would have gotten with using controlled forms.</p>\n<p>We can expect the responses to be in this order:</p>\n<ul>\n<li><code>POST</code> request triggers a status <code>OK</code>, the response from the server.</li>\n<li>the received response can be added to the posts list on success. Else we can show an error alert.</li>\n</ul>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../../src/assets/blogs/remix-better-forms-for-better-ux-and-dx/img-4.webp&#x22;,&#x22;alt&#x22;:&#x22;Screenshot 2023-06-14 at 12.04.52 PM.png&#x22;,&#x22;index&#x22;:0}\"></p>\n<p>This is how the form would work in the case of our SPA.</p>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../../src/assets/blogs/remix-better-forms-for-better-ux-and-dx/img-5.webp&#x22;,&#x22;alt&#x22;:&#x22;image (19).png&#x22;,&#x22;index&#x22;:0}\"></p>\n<p>You can refer to the code <a href=\"../../../src/assets/blogs/remix-better-forms-for-better-ux-and-dx/img-6.webp\"><strong>here</strong></a><strong>.</strong></p>\n<h3 id=\"pros-of-the-approach-1\"><strong>Pros of the Approach</strong></h3>\n<ol>\n<li>We can add optimistic UI.</li>\n<li>We can add pending UI.</li>\n<li>We can add built-in HTML validations.</li>\n</ol>\n<h3 id=\"cons-of-the-approach-1\"><strong>Cons of the Approach</strong></h3>\n<ol>\n<li>We don’t have a simple mental model.</li>\n<li>We have to create a request, prevent the default behavior of the browser and send data to a URL by creating the payload, which the browser can also do, but we hijack it and make it more difficult.</li>\n<li>We have to write a lot of code for the form to work (130 lines here).</li>\n</ol>\n<h2 id=\"a-better-way-to-write-forms\"><strong>A Better Way to Write Forms?</strong></h2>\n<p>Till now, we have seen two different ways of writing forms, and both have their pros and cons. But what if I tell you that we can use the pros which we have seen at both places, plus add type safety and server-side validations in case your javascript has not loaded yet on the client? Would you believe me?</p>\n<p>Well, that is where Remix mental modal for forms comes into the picture.</p>\n<p>With Remix, you have a function that runs on the server for different HTTP calls.</p>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../../src/assets/blogs/remix-better-forms-for-better-ux-and-dx/img-7.webp&#x22;,&#x22;alt&#x22;:&#x22;image (3).jpeg&#x22;,&#x22;index&#x22;:0}\"></p>\n<p>This is a <code>loader</code> function, which runs on the server for every <code>GET</code> call.</p>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../../src/assets/blogs/remix-better-forms-for-better-ux-and-dx/img-8.webp&#x22;,&#x22;alt&#x22;:&#x22;image (4).jpeg&#x22;,&#x22;index&#x22;:0}\"></p>\n<p>This is an <code>action</code> function which runs on the server when we make a <code>POST/ PUT/ DELETE</code> call to the server.</p>\n<p>This is how the form would look like.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\"><code><span class=\"line\"><span style=\"color:#F97583\">export</span><span style=\"color:#F97583\"> default</span><span style=\"color:#F97583\"> function</span><span style=\"color:#B392F0\"> Posts</span><span style=\"color:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // get data when the loader function runs on the mount of the                 component</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#79B8FF\"> data</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> useLoaderData</span><span style=\"color:#E1E4E8\">() </span><span style=\"color:#F97583\">as</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#FFAB70\">posts</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> Array</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">Post</span><span style=\"color:#E1E4E8\">> };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // returns errors from the action function when user submits the form</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#79B8FF\"> errors</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> useActionData</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">//hook exposed by remix/react to track states of the form i.e. submitting/loading/idle</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#79B8FF\"> transition</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> useTransition</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#79B8FF\"> text</span><span style=\"color:#F97583\"> =</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    transition.state </span><span style=\"color:#F97583\">===</span><span style=\"color:#9ECBFF\"> \"submitting\"</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">      ?</span><span style=\"color:#9ECBFF\"> \"Saving...\"</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">      :</span><span style=\"color:#E1E4E8\"> transition.state </span><span style=\"color:#F97583\">===</span><span style=\"color:#9ECBFF\"> \"loading\"</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">      ?</span><span style=\"color:#9ECBFF\"> \"Saved!\"</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">      :</span><span style=\"color:#9ECBFF\"> \"create post\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">  return</span><span style=\"color:#E1E4E8\"> (</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    &#x3C;</span><span style=\"color:#E1E4E8\">div className</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\" m-auto\"</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">      &#x3C;</span><span style=\"color:#E1E4E8\">div className</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"flex\"</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">        &#x3C;</span><span style=\"color:#E1E4E8\">div className</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"flex-basis-1-3\"</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">          &#x3C;</span><span style=\"color:#E1E4E8\">ul hidden</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">{!data.posts.length}</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">            {</span><span style=\"color:#FFAB70\">data</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#FFAB70\">posts</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#FFAB70\">map</span><span style=\"color:#E1E4E8\">((</span><span style=\"color:#FFAB70\">post</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">i</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> (</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">              &#x3C;</span><span style=\"color:#E1E4E8\">li style</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">{{ </span><span style=\"color:#B392F0\">marginBottom</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"20px\"</span><span style=\"color:#E1E4E8\"> }} key</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">{i}</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">                &#x3C;</span><span style=\"color:#E1E4E8\">p className</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"bold my-1\"</span><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\">{post.title}</span><span style=\"color:#F97583\">&#x3C;/</span><span style=\"color:#E1E4E8\">p</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">                &#x3C;</span><span style=\"color:#E1E4E8\">p className</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"bold my-1\"</span><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\">{post.desc}</span><span style=\"color:#F97583\">&#x3C;/</span><span style=\"color:#E1E4E8\">p</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">              &#x3C;/</span><span style=\"color:#E1E4E8\">li</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">            ))}</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">          &#x3C;/</span><span style=\"color:#E1E4E8\">ul</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">        &#x3C;/</span><span style=\"color:#E1E4E8\">div</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">        &#x3C;</span><span style=\"color:#E1E4E8\">div className</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"mx-2 border-r-2 px-2\"</span><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\">&#x3C;/</span><span style=\"color:#B392F0\">div</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">        &#x3C;</span><span style=\"color:#E1E4E8\">div className</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"flex-basis-2-3\"</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">          &#x3C;</span><span style=\"color:#E1E4E8\">div className</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"border-color-brown border-b-2\"</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">            &#x3C;</span><span style=\"color:#B392F0\">h1</span><span style=\"color:#E1E4E8\">>My Blog</span><span style=\"color:#F97583\">&#x3C;/</span><span style=\"color:#E1E4E8\">h1</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">          &#x3C;/</span><span style=\"color:#E1E4E8\">div</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">          &#x3C;</span><span style=\"color:#FFAB70\">Form</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">            method</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"post\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">            onSubmit</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">{(event) => {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">              const</span><span style=\"color:#79B8FF\"> form</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> event.currentTarget;</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">              requestAnimationFrame</span><span style=\"color:#E1E4E8\">(() </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                form.</span><span style=\"color:#B392F0\">reset</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">              });</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">            }}</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">          ></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">            &#x3C;</span><span style=\"color:#E1E4E8\">div className</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"flex flex-col\"</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">              &#x3C;</span><span style=\"color:#E1E4E8\">label htmlFor</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"input-1\"</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                &#x3C;</span><span style=\"color:#B392F0\">h3</span><span style=\"color:#E1E4E8\">>title</span><span style=\"color:#F97583\">&#x3C;/</span><span style=\"color:#E1E4E8\">h3</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">              &#x3C;/</span><span style=\"color:#E1E4E8\">label</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">              &#x3C;</span><span style=\"color:#FFAB70\">input</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                type</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"text\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                id</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"input-1\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                className</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"w-100\"</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">                autoFocus</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                data</span><span style=\"color:#F97583\">-</span><span style=\"color:#E1E4E8\">pending</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                  transition.state </span><span style=\"color:#F97583\">===</span><span style=\"color:#9ECBFF\"> \"submitting\"</span><span style=\"color:#F97583\"> ||</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                  transition.state </span><span style=\"color:#F97583\">===</span><span style=\"color:#9ECBFF\"> \"loading\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                name</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"title\"</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">              /></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">              {</span><span style=\"color:#FFAB70\">errors</span><span style=\"color:#E1E4E8\">?.</span><span style=\"color:#FFAB70\">title</span><span style=\"color:#E1E4E8\"> &#x26;&#x26; &#x3C;</span><span style=\"color:#FFAB70\">p</span><span style=\"color:#FFAB70\"> className</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"error\"</span><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\">{errors.title}</span><span style=\"color:#F97583\">&#x3C;/</span><span style=\"color:#E1E4E8\">p</span><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">              &#x3C;</span><span style=\"color:#E1E4E8\">label htmlFor</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"input-2\"</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                &#x3C;</span><span style=\"color:#B392F0\">h3</span><span style=\"color:#E1E4E8\">>desc</span><span style=\"color:#F97583\">&#x3C;/</span><span style=\"color:#E1E4E8\">h3</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">              &#x3C;/</span><span style=\"color:#E1E4E8\">label</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">              &#x3C;</span><span style=\"color:#FFAB70\">input</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                type</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"text\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                id</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"input-2\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                className</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"w-100\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                name</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"desc\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                data</span><span style=\"color:#F97583\">-</span><span style=\"color:#E1E4E8\">pending</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                  transition.state </span><span style=\"color:#F97583\">===</span><span style=\"color:#9ECBFF\"> \"submitting\"</span><span style=\"color:#F97583\"> ||</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                  transition.state </span><span style=\"color:#F97583\">===</span><span style=\"color:#9ECBFF\"> \"loading\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                }</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">              /></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">              {</span><span style=\"color:#FFAB70\">errors</span><span style=\"color:#E1E4E8\">?.</span><span style=\"color:#FFAB70\">desc</span><span style=\"color:#E1E4E8\"> &#x26;&#x26; &#x3C;</span><span style=\"color:#FFAB70\">p</span><span style=\"color:#FFAB70\"> className</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"error\"</span><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\">{errors.desc}</span><span style=\"color:#F97583\">&#x3C;/</span><span style=\"color:#E1E4E8\">p</span><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">              &#x3C;</span><span style=\"color:#E1E4E8\">label htmlFor</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"input-3\"</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                &#x3C;</span><span style=\"color:#B392F0\">h3</span><span style=\"color:#E1E4E8\">>content</span><span style=\"color:#F97583\">&#x3C;/</span><span style=\"color:#E1E4E8\">h3</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">              &#x3C;/</span><span style=\"color:#E1E4E8\">label</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">              &#x3C;</span><span style=\"color:#FFAB70\">textarea</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                id</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"input-3\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                cols</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">{</span><span style=\"color:#79B8FF\">30</span><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                rows</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">{</span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                name</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"content\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                data</span><span style=\"color:#F97583\">-</span><span style=\"color:#E1E4E8\">pending</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                  transition.state </span><span style=\"color:#F97583\">===</span><span style=\"color:#9ECBFF\"> \"submitting\"</span><span style=\"color:#F97583\"> ||</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                  transition.state </span><span style=\"color:#F97583\">===</span><span style=\"color:#9ECBFF\"> \"loading\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                }</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">              ></span><span style=\"color:#E1E4E8\">&#x3C;/</span><span style=\"color:#B392F0\">textarea</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">              {</span><span style=\"color:#FFAB70\">errors</span><span style=\"color:#E1E4E8\">?.</span><span style=\"color:#FFAB70\">content</span><span style=\"color:#E1E4E8\"> &#x26;&#x26; &#x3C;</span><span style=\"color:#FFAB70\">p</span><span style=\"color:#FFAB70\"> className</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"error\"</span><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\">{errors.content}</span><span style=\"color:#F97583\">&#x3C;/</span><span style=\"color:#E1E4E8\">p</span><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">            &#x3C;/</span><span style=\"color:#E1E4E8\">div</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">            &#x3C;</span><span style=\"color:#E1E4E8\">div className</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"flex justify-end\"</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">              &#x3C;</span><span style=\"color:#FFAB70\">button</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                type</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"submit\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                disabled</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                  transition.state </span><span style=\"color:#F97583\">===</span><span style=\"color:#9ECBFF\"> \"submitting\"</span><span style=\"color:#F97583\"> ||</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                  transition.state </span><span style=\"color:#F97583\">===</span><span style=\"color:#9ECBFF\"> \"loading\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                }</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">              ></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                {</span><span style=\"color:#FFAB70\">text</span><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">              &#x3C;/</span><span style=\"color:#E1E4E8\">button</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">            &#x3C;/</span><span style=\"color:#E1E4E8\">div</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">          &#x3C;/</span><span style=\"color:#E1E4E8\">Form</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">        &#x3C;/</span><span style=\"color:#E1E4E8\">div</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">      &#x3C;/</span><span style=\"color:#E1E4E8\">div</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    &#x3C;/</span><span style=\"color:#E1E4E8\">div</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  );</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<p>This is how you would work with the form:</p>\n<ul>\n<li>You get the data from the server when the page loads using the <code>useLoaderData</code> hook.</li>\n<li>You write JSX for your form, and you can use the state from the <code>useTransition</code> hook for adding optimistic /pending UI.</li>\n<li>Whenever the user fills out the form and clicks on submit, the request is sent to the <code>action</code> function, which runs on the server and can validate the data using native JavasScript APIs.</li>\n<li>If the request is successful, you can return a redirect response from the server, which will trigger the <code>useLoaderData</code> hook instead of a full page refresh, and you will get the latest posts from the server, which will be displayed on the screen.</li>\n</ul>\n<h3 id=\"response-sequence\"><strong>Response Sequence</strong></h3>\n<p>This is the way you can expect the order of responses to be when you submit the form.</p>\n<ul>\n<li>A successful post request triggers a <code>redirect</code> response from the server.</li>\n<li>The redirect response triggers a <code>get</code> call on the client.</li>\n</ul>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../../src/assets/blogs/remix-better-forms-for-better-ux-and-dx/img-9.webp&#x22;,&#x22;alt&#x22;:&#x22;Screenshot 2023-06-14 at 12.05.23 PM.png&#x22;,&#x22;index&#x22;:0}\"></p>\n<p>This is how the form would work in the case of what Kent C. Dodds calls a PESPA (progressively enhanced single-page app).</p>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../../src/assets/blogs/remix-better-forms-for-better-ux-and-dx/img-10.webp&#x22;,&#x22;alt&#x22;:&#x22;image (20).png&#x22;,&#x22;index&#x22;:0}\"></p>\n<p>You can refer to the code <a href=\"https://github.com/isVivek99/forms-framework-Debate/tree/master/03-pespa/blog-tutorial/app/routes\"><strong>here</strong></a><strong>.</strong></p>\n<h3 id=\"pros-of-this-approach\"><strong>Pros of this Approach</strong></h3>\n<ol>\n<li>We have a SPA with a mental model of an MPA, i.e. old web and new web combined.</li>\n<li>We can add optimistic UI.</li>\n<li>We can add pending UI.</li>\n<li>We can add custom validations on the server as well as on the client by using <code>react-hook-form</code>.</li>\n<li>We can see the form is smaller compared to the old react form (100 lines).</li>\n</ol>\n<h3 id=\"cons-of-this-approach\"><strong>Cons of this Approach</strong></h3>\n<ol>\n<li>I personally think that there is a drastic change in the mental model and it will be difficult to get accustomed to.</li>\n</ol>\n<h2 id=\"conclusion\"><strong>Conclusion</strong></h2>\n<p>I think that with RSC(React Server Components) coming in, we are already moving more toward the server. The React team feels that for new devs coming in, the server is the best place to start instead of the client. And I am up for it.</p>",{headings:228,localImagePaths:281,remoteImagePaths:282,frontmatter:283,imagePaths:285},[229,232,235,238,241,244,247,250,253,256,259,262,264,266,269,272,275,278],{depth:33,slug:230,text:231},"introduction","Introduction",{depth:33,slug:233,text:234},"tldr","TLDR",{depth:37,slug:236,text:237},"what-is-remix","What is Remix?",{depth:37,slug:239,text:240},"some-technical-terms","Some Technical Terms",{depth:37,slug:242,text:243},"we-have-divided-this-blog-into-three-parts-in-the-same-way","We have divided this blog into three parts in the same way:",{depth:33,slug:245,text:246},"what-are-we-going-to-cover-in-this-blog","What are We Going to Cover in This Blog?",{depth:33,slug:248,text:249},"what-are-forms","What are Forms?",{depth:33,slug:251,text:252},"how-did-forms-work-in-the-past","How Did Forms Work in the Past?",{depth:37,slug:254,text:255},"pros-of-the-approach","Pros of the Approach",{depth:37,slug:257,text:258},"cons-of-the-approach","Cons of the Approach",{depth:33,slug:260,text:261},"how-did-forms-look-during-the-spa-era","How Did Forms Look During the SPA Era?",{depth:37,slug:263,text:255},"pros-of-the-approach-1",{depth:37,slug:265,text:258},"cons-of-the-approach-1",{depth:33,slug:267,text:268},"a-better-way-to-write-forms","A Better Way to Write Forms?",{depth:37,slug:270,text:271},"response-sequence","Response Sequence",{depth:37,slug:273,text:274},"pros-of-this-approach","Pros of this Approach",{depth:37,slug:276,text:277},"cons-of-this-approach","Cons of this Approach",{depth:33,slug:279,text:280},"conclusion","Conclusion",[214,215,216,217,218,219,220,221,222],[],{title:206,subheading:207,slug:203,publishedAt:284,readingTimeInMins:210,cover:223},["Date","2023-06-15T00:00:00.000Z"],[214,215,216,217,218,219,220,221,222],"my-first-blog.md"];

export { _astro_dataLayerContent as default };
